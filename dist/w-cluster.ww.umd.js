!function(d,l){"object"==typeof exports&&"undefined"!=typeof module?module.exports=l():"function"==typeof define&&define.amd?define(l):(d="undefined"!=typeof globalThis?globalThis:d||self)["w-cluster"]=l()}(this,(function(){"use strict";function d(d,l){(null==l||l>d.length)&&(l=d.length);for(var c=0,Z=new Array(l);c<l;c++)Z[c]=d[c];return Z}function l(l){return function(l){if(Array.isArray(l))return d(l)}(l)||function(d){if("undefined"!=typeof Symbol&&null!=d[Symbol.iterator]||null!=d["@@iterator"])return Array.from(d)}(l)||function(l,c){if(l){if("string"==typeof l)return d(l,c);var Z=Object.prototype.toString.call(l).slice(8,-1);return"Object"===Z&&l.constructor&&(Z=l.constructor.name),"Map"===Z||"Set"===Z?Array.from(l):"Arguments"===Z||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(Z)?d(l,c):void 0}}(l)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function c(d,l,c,Z,b,X,y){try{var G=d[X](y),m=G.value}catch(d){return void c(d)}G.done?l(m):Promise.resolve(m).then(Z,b)}function Z(d){return function(){var l=this,Z=arguments;return new Promise((function(b,X){var y=d.apply(l,Z);function G(d){c(y,b,X,G,m,"next",d)}function m(d){c(y,b,X,G,m,"throw",d)}G(void 0)}))}}function b(d){return(b="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(d){return typeof d}:function(d){return d&&"function"==typeof Symbol&&d.constructor===Symbol&&d!==Symbol.prototype?"symbol":typeof d})(d)}function X(d){var l={exports:{}};return d(l,l.exports),l.exports}var y=X((function(d){var l=function(d){var l,c=Object.prototype,Z=c.hasOwnProperty,X="function"==typeof Symbol?Symbol:{},y=X.iterator||"@@iterator",G=X.asyncIterator||"@@asyncIterator",m=X.toStringTag||"@@toStringTag";function K(d,l,c){return Object.defineProperty(d,l,{value:c,enumerable:!0,configurable:!0,writable:!0}),d[l]}try{K({},"")}catch(d){K=function(d,l,c){return d[l]=c}}function p(d,l,c,Z){var b=l&&l.prototype instanceof o?l:o,X=Object.create(b.prototype),y=new g(Z||[]);return X._invoke=function(d,l,c){var Z=i;return function(b,X){if(Z===u)throw new Error("Generator is already running");if(Z===W){if("throw"===b)throw X;return Q()}for(c.method=b,c.arg=X;;){var y=c.delegate;if(y){var G=S(y,c);if(G){if(G===h)continue;return G}}if("next"===c.method)c.sent=c._sent=c.arg;else if("throw"===c.method){if(Z===i)throw Z=W,c.arg;c.dispatchException(c.arg)}else"return"===c.method&&c.abrupt("return",c.arg);Z=u;var m=t(d,l,c);if("normal"===m.type){if(Z=c.done?W:I,m.arg===h)continue;return{value:m.arg,done:c.done}}"throw"===m.type&&(Z=W,c.method="throw",c.arg=m.arg)}}}(d,c,y),X}function t(d,l,c){try{return{type:"normal",arg:d.call(l,c)}}catch(d){return{type:"throw",arg:d}}}d.wrap=p;var i="suspendedStart",I="suspendedYield",u="executing",W="completed",h={};function o(){}function V(){}function s(){}var H={};H[y]=function(){return this};var L=Object.getPrototypeOf,a=L&&L(L(z([])));a&&a!==c&&Z.call(a,y)&&(H=a);var C=s.prototype=o.prototype=Object.create(H);function n(d){["next","throw","return"].forEach((function(l){K(d,l,(function(d){return this._invoke(l,d)}))}))}function x(d,l){function c(X,y,G,m){var K=t(d[X],d,y);if("throw"!==K.type){var p=K.arg,i=p.value;return i&&"object"===b(i)&&Z.call(i,"__await")?l.resolve(i.__await).then((function(d){c("next",d,G,m)}),(function(d){c("throw",d,G,m)})):l.resolve(i).then((function(d){p.value=d,G(p)}),(function(d){return c("throw",d,G,m)}))}m(K.arg)}var X;this._invoke=function(d,Z){function b(){return new l((function(l,b){c(d,Z,l,b)}))}return X=X?X.then(b,b):b()}}function S(d,c){var Z=d.iterator[c.method];if(Z===l){if(c.delegate=null,"throw"===c.method){if(d.iterator.return&&(c.method="return",c.arg=l,S(d,c),"throw"===c.method))return h;c.method="throw",c.arg=new TypeError("The iterator does not provide a 'throw' method")}return h}var b=t(Z,d.iterator,c.arg);if("throw"===b.type)return c.method="throw",c.arg=b.arg,c.delegate=null,h;var X=b.arg;return X?X.done?(c[d.resultName]=X.value,c.next=d.nextLoc,"return"!==c.method&&(c.method="next",c.arg=l),c.delegate=null,h):X:(c.method="throw",c.arg=new TypeError("iterator result is not an object"),c.delegate=null,h)}function Y(d){var l={tryLoc:d[0]};1 in d&&(l.catchLoc=d[1]),2 in d&&(l.finallyLoc=d[2],l.afterLoc=d[3]),this.tryEntries.push(l)}function R(d){var l=d.completion||{};l.type="normal",delete l.arg,d.completion=l}function g(d){this.tryEntries=[{tryLoc:"root"}],d.forEach(Y,this),this.reset(!0)}function z(d){if(d){var c=d[y];if(c)return c.call(d);if("function"==typeof d.next)return d;if(!isNaN(d.length)){var b=-1,X=function c(){for(;++b<d.length;)if(Z.call(d,b))return c.value=d[b],c.done=!1,c;return c.value=l,c.done=!0,c};return X.next=X}}return{next:Q}}function Q(){return{value:l,done:!0}}return V.prototype=C.constructor=s,s.constructor=V,V.displayName=K(s,m,"GeneratorFunction"),d.isGeneratorFunction=function(d){var l="function"==typeof d&&d.constructor;return!!l&&(l===V||"GeneratorFunction"===(l.displayName||l.name))},d.mark=function(d){return Object.setPrototypeOf?Object.setPrototypeOf(d,s):(d.__proto__=s,K(d,m,"GeneratorFunction")),d.prototype=Object.create(C),d},d.awrap=function(d){return{__await:d}},n(x.prototype),x.prototype[G]=function(){return this},d.AsyncIterator=x,d.async=function(l,c,Z,b,X){void 0===X&&(X=Promise);var y=new x(p(l,c,Z,b),X);return d.isGeneratorFunction(c)?y:y.next().then((function(d){return d.done?d.value:y.next()}))},n(C),K(C,m,"Generator"),C[y]=function(){return this},C.toString=function(){return"[object Generator]"},d.keys=function(d){var l=[];for(var c in d)l.push(c);return l.reverse(),function c(){for(;l.length;){var Z=l.pop();if(Z in d)return c.value=Z,c.done=!1,c}return c.done=!0,c}},d.values=z,g.prototype={constructor:g,reset:function(d){if(this.prev=0,this.next=0,this.sent=this._sent=l,this.done=!1,this.delegate=null,this.method="next",this.arg=l,this.tryEntries.forEach(R),!d)for(var c in this)"t"===c.charAt(0)&&Z.call(this,c)&&!isNaN(+c.slice(1))&&(this[c]=l)},stop:function(){this.done=!0;var d=this.tryEntries[0].completion;if("throw"===d.type)throw d.arg;return this.rval},dispatchException:function(d){if(this.done)throw d;var c=this;function b(Z,b){return G.type="throw",G.arg=d,c.next=Z,b&&(c.method="next",c.arg=l),!!b}for(var X=this.tryEntries.length-1;X>=0;--X){var y=this.tryEntries[X],G=y.completion;if("root"===y.tryLoc)return b("end");if(y.tryLoc<=this.prev){var m=Z.call(y,"catchLoc"),K=Z.call(y,"finallyLoc");if(m&&K){if(this.prev<y.catchLoc)return b(y.catchLoc,!0);if(this.prev<y.finallyLoc)return b(y.finallyLoc)}else if(m){if(this.prev<y.catchLoc)return b(y.catchLoc,!0)}else{if(!K)throw new Error("try statement without catch or finally");if(this.prev<y.finallyLoc)return b(y.finallyLoc)}}}},abrupt:function(d,l){for(var c=this.tryEntries.length-1;c>=0;--c){var b=this.tryEntries[c];if(b.tryLoc<=this.prev&&Z.call(b,"finallyLoc")&&this.prev<b.finallyLoc){var X=b;break}}X&&("break"===d||"continue"===d)&&X.tryLoc<=l&&l<=X.finallyLoc&&(X=null);var y=X?X.completion:{};return y.type=d,y.arg=l,X?(this.method="next",this.next=X.finallyLoc,h):this.complete(y)},complete:function(d,l){if("throw"===d.type)throw d.arg;return"break"===d.type||"continue"===d.type?this.next=d.arg:"return"===d.type?(this.rval=this.arg=d.arg,this.method="return",this.next="end"):"normal"===d.type&&l&&(this.next=l),h},finish:function(d){for(var l=this.tryEntries.length-1;l>=0;--l){var c=this.tryEntries[l];if(c.finallyLoc===d)return this.complete(c.completion,c.afterLoc),R(c),h}},catch:function(d){for(var l=this.tryEntries.length-1;l>=0;--l){var c=this.tryEntries[l];if(c.tryLoc===d){var Z=c.completion;if("throw"===Z.type){var b=Z.arg;R(c)}return b}}throw new Error("illegal catch attempt")},delegateYield:function(d,c,Z){return this.delegate={iterator:z(d),resultName:c,nextLoc:Z},"next"===this.method&&(this.arg=l),h}},d}(d.exports);try{regeneratorRuntime=l}catch(d){Function("r","regeneratorRuntime = r")(l)}})),G=X((function(d){var l=Object.prototype.hasOwnProperty,c="~";function Z(){}function b(d,l,c){this.fn=d,this.context=l,this.once=c||!1}function X(d,l,Z,X,y){if("function"!=typeof Z)throw new TypeError("The listener must be a function");var G=new b(Z,X||d,y),m=c?c+l:l;return d._events[m]?d._events[m].fn?d._events[m]=[d._events[m],G]:d._events[m].push(G):(d._events[m]=G,d._eventsCount++),d}function y(d,l){0==--d._eventsCount?d._events=new Z:delete d._events[l]}function G(){this._events=new Z,this._eventsCount=0}Object.create&&(Z.prototype=Object.create(null),(new Z).__proto__||(c=!1)),G.prototype.eventNames=function(){var d,Z,b=[];if(0===this._eventsCount)return b;for(Z in d=this._events)l.call(d,Z)&&b.push(c?Z.slice(1):Z);return Object.getOwnPropertySymbols?b.concat(Object.getOwnPropertySymbols(d)):b},G.prototype.listeners=function(d){var l=c?c+d:d,Z=this._events[l];if(!Z)return[];if(Z.fn)return[Z.fn];for(var b=0,X=Z.length,y=new Array(X);b<X;b++)y[b]=Z[b].fn;return y},G.prototype.listenerCount=function(d){var l=c?c+d:d,Z=this._events[l];return Z?Z.fn?1:Z.length:0},G.prototype.emit=function(d,l,Z,b,X,y){var G=c?c+d:d;if(!this._events[G])return!1;var m,K,p=this._events[G],t=arguments.length;if(p.fn){switch(p.once&&this.removeListener(d,p.fn,void 0,!0),t){case 1:return p.fn.call(p.context),!0;case 2:return p.fn.call(p.context,l),!0;case 3:return p.fn.call(p.context,l,Z),!0;case 4:return p.fn.call(p.context,l,Z,b),!0;case 5:return p.fn.call(p.context,l,Z,b,X),!0;case 6:return p.fn.call(p.context,l,Z,b,X,y),!0}for(K=1,m=new Array(t-1);K<t;K++)m[K-1]=arguments[K];p.fn.apply(p.context,m)}else{var i,I=p.length;for(K=0;K<I;K++)switch(p[K].once&&this.removeListener(d,p[K].fn,void 0,!0),t){case 1:p[K].fn.call(p[K].context);break;case 2:p[K].fn.call(p[K].context,l);break;case 3:p[K].fn.call(p[K].context,l,Z);break;case 4:p[K].fn.call(p[K].context,l,Z,b);break;default:if(!m)for(i=1,m=new Array(t-1);i<t;i++)m[i-1]=arguments[i];p[K].fn.apply(p[K].context,m)}}return!0},G.prototype.on=function(d,l,c){return X(this,d,l,c,!1)},G.prototype.once=function(d,l,c){return X(this,d,l,c,!0)},G.prototype.removeListener=function(d,l,Z,b){var X=c?c+d:d;if(!this._events[X])return this;if(!l)return y(this,X),this;var G=this._events[X];if(G.fn)G.fn!==l||b&&!G.once||Z&&G.context!==Z||y(this,X);else{for(var m=0,K=[],p=G.length;m<p;m++)(G[m].fn!==l||b&&!G[m].once||Z&&G[m].context!==Z)&&K.push(G[m]);K.length?this._events[X]=1===K.length?K[0]:K:y(this,X)}return this},G.prototype.removeAllListeners=function(d){var l;return d?(l=c?c+d:d,this._events[l]&&y(this,l)):(this._events=new Z,this._eventsCount=0),this},G.prototype.off=G.prototype.removeListener,G.prototype.addListener=G.prototype.on,G.prefixed=c,G.EventEmitter=G,d.exports=G}));function m(){return new G}function K(){var d,l,c=new Promise((function(){d=arguments[0],l=arguments[1]}));return c.resolve=d,c.reject=l,c}function p(){for(var d=arguments.length>0&&void 0!==arguments[0]?arguments[0]:10,l=[],c="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""),Z=c.length,b=0;b<d;b++)l[b]=c[0|Math.random()*Z];var X=l.join("");return X}var t=atob("");function i(){function d(d){var l,c=window.URL||window.webkitURL;try{return l=new Blob([d]),new Worker(c.createObjectURL(l))}catch(d){console.log(d)}}var l=d(t);if(null===l)return console.log("invalid webworker"),null;function c(){l.terminate(),l=void 0}var Z=m();function b(){var d={mode:"init",type:"object",input:Array.prototype.slice.call(arguments)};l.postMessage(d)}function X(){var d=K(),c=p(),b={mode:"call",id:c,fun:"PCA",input:Array.prototype.slice.call(arguments)};return l.postMessage(b),Z.once(c,(function(l){"success"===l.state?d.resolve(l.msg):d.reject(l.msg)})),d}function y(){var d=K(),c=p(),b={mode:"call",id:c,fun:"cluster",input:Array.prototype.slice.call(arguments)};return l.postMessage(b),Z.once(c,(function(l){"success"===l.state?d.resolve(l.msg):d.reject(l.msg)})),d}return l.onmessage=function(d){var l=d.data,c=l.mode;"emit"!==c&&"return"!==c||("emit"===c&&Z.emit(l.evName,l.msg),"return"===c&&Z.emit(l.id,l))},b(Array.prototype.slice.call(arguments)),Z.PCA=X,Z.cluster=y,Z.terminate=c,Z}var I,u,W=null,h={PCA:(u=Z(y.mark((function d(){var c,Z,b,X=arguments;return y.wrap((function(d){for(;;)switch(d.prev=d.next){case 0:return c=Array.prototype.slice.call(X),Z=i(),d.next=4,Z.PCA.apply(Z,l(c)).finally((function(){Z.terminate()}));case 4:return b=d.sent,d.abrupt("return",b);case 6:case"end":return d.stop()}}),d)}))),function(){return u.apply(this,arguments)}),cluster:(I=Z(y.mark((function d(){var c,Z,b,X=arguments;return y.wrap((function(d){for(;;)switch(d.prev=d.next){case 0:return c=Array.prototype.slice.call(X),Z=i(),d.next=4,Z.cluster.apply(Z,l(c)).finally((function(){Z.terminate()}));case 4:return b=d.sent,d.abrupt("return",b);case 6:case"end":return d.stop()}}),d)}))),function(){return I.apply(this,arguments)})};for(var o in W=m(),h){var V=h[o];W[o]=V}return W}));
