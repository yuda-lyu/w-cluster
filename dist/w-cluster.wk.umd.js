!function(d,l){"object"==typeof exports&&"undefined"!=typeof module?module.exports=l(require("worker_threads")):"function"==typeof define&&define.amd?define(["worker_threads"],l):(d="undefined"!=typeof globalThis?globalThis:d||self)["w-cluster"]=l(d.worker_threads)}(this,(function(d){"use strict";function l(d){return d&&"object"==typeof d&&"default"in d?d:{default:d}}var c=l(d);function b(d){return b="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(d){return typeof d}:function(d){return d&&"function"==typeof Symbol&&d.constructor===Symbol&&d!==Symbol.prototype?"symbol":typeof d},b(d)}"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self&&self;function Z(d){var l={exports:{}};return d(l,l.exports),l.exports}var X=Z((function(d,l){d.exports=function(d){function l(d,l){(null==l||l>d.length)&&(l=d.length);for(var c=0,b=new Array(l);c<l;c++)b[c]=d[c];return b}function c(d){return function(d){if(Array.isArray(d))return l(d)}(d)||function(d){if("undefined"!=typeof Symbol&&null!=d[Symbol.iterator]||null!=d["@@iterator"])return Array.from(d)}(d)||function(d,c){if(d){if("string"==typeof d)return l(d,c);var b=Object.prototype.toString.call(d).slice(8,-1);return"Object"===b&&d.constructor&&(b=d.constructor.name),"Map"===b||"Set"===b?Array.from(d):"Arguments"===b||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(b)?l(d,c):void 0}}(d)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Z(d,l,c,b,Z,X,G){try{var y=d[X](G),m=y.value}catch(d){return void c(d)}y.done?l(m):Promise.resolve(m).then(b,Z)}function X(d){return function(){var l=this,c=arguments;return new Promise((function(b,X){var G=d.apply(l,c);function y(d){Z(G,b,X,y,m,"next",d)}function m(d){Z(G,b,X,y,m,"throw",d)}y(void 0)}))}}function G(d){return G="function"==typeof Symbol&&"symbol"==b(Symbol.iterator)?function(d){return b(d)}:function(d){return d&&"function"==typeof Symbol&&d.constructor===Symbol&&d!==Symbol.prototype?"symbol":b(d)},G(d)}function y(d){var l={exports:{}};return d(l,l.exports),l.exports}var m,K=y((function(d){var l=function(d){var l,c=Object.prototype,b=c.hasOwnProperty,Z="function"==typeof Symbol?Symbol:{},X=Z.iterator||"@@iterator",y=Z.asyncIterator||"@@asyncIterator",m=Z.toStringTag||"@@toStringTag";function K(d,l,c){return Object.defineProperty(d,l,{value:c,enumerable:!0,configurable:!0,writable:!0}),d[l]}try{K({},"")}catch(d){K=function(d,l,c){return d[l]=c}}function p(d,l,c,b){var Z=l&&l.prototype instanceof W?l:W,X=Object.create(Z.prototype),G=new R(b||[]);return X._invoke=function(d,l,c){var b=i;return function(Z,X){if(b===I)throw new Error("Generator is already running");if(b===o){if("throw"===Z)throw X;return T()}for(c.method=Z,c.arg=X;;){var G=c.delegate;if(G){var y=S(G,c);if(y){if(y===h)continue;return y}}if("next"===c.method)c.sent=c._sent=c.arg;else if("throw"===c.method){if(b===i)throw b=o,c.arg;c.dispatchException(c.arg)}else"return"===c.method&&c.abrupt("return",c.arg);b=I;var m=t(d,l,c);if("normal"===m.type){if(b=c.done?o:u,m.arg===h)continue;return{value:m.arg,done:c.done}}"throw"===m.type&&(b=o,c.method="throw",c.arg=m.arg)}}}(d,c,G),X}function t(d,l,c){try{return{type:"normal",arg:d.call(l,c)}}catch(d){return{type:"throw",arg:d}}}d.wrap=p;var i="suspendedStart",u="suspendedYield",I="executing",o="completed",h={};function W(){}function V(){}function s(){}var H={};K(H,X,(function(){return this}));var L=Object.getPrototypeOf,C=L&&L(L(z([])));C&&C!==c&&b.call(C,X)&&(H=C);var a=s.prototype=W.prototype=Object.create(H);function n(d){["next","throw","return"].forEach((function(l){K(d,l,(function(d){return this._invoke(l,d)}))}))}function x(d,l){function c(Z,X,y,m){var K=t(d[Z],d,X);if("throw"!==K.type){var p=K.arg,i=p.value;return i&&"object"===G(i)&&b.call(i,"__await")?l.resolve(i.__await).then((function(d){c("next",d,y,m)}),(function(d){c("throw",d,y,m)})):l.resolve(i).then((function(d){p.value=d,y(p)}),(function(d){return c("throw",d,y,m)}))}m(K.arg)}var Z;this._invoke=function(d,b){function X(){return new l((function(l,Z){c(d,b,l,Z)}))}return Z=Z?Z.then(X,X):X()}}function S(d,c){var b=d.iterator[c.method];if(b===l){if(c.delegate=null,"throw"===c.method){if(d.iterator.return&&(c.method="return",c.arg=l,S(d,c),"throw"===c.method))return h;c.method="throw",c.arg=new TypeError("The iterator does not provide a 'throw' method")}return h}var Z=t(b,d.iterator,c.arg);if("throw"===Z.type)return c.method="throw",c.arg=Z.arg,c.delegate=null,h;var X=Z.arg;return X?X.done?(c[d.resultName]=X.value,c.next=d.nextLoc,"return"!==c.method&&(c.method="next",c.arg=l),c.delegate=null,h):X:(c.method="throw",c.arg=new TypeError("iterator result is not an object"),c.delegate=null,h)}function Y(d){var l={tryLoc:d[0]};1 in d&&(l.catchLoc=d[1]),2 in d&&(l.finallyLoc=d[2],l.afterLoc=d[3]),this.tryEntries.push(l)}function g(d){var l=d.completion||{};l.type="normal",delete l.arg,d.completion=l}function R(d){this.tryEntries=[{tryLoc:"root"}],d.forEach(Y,this),this.reset(!0)}function z(d){if(d){var c=d[X];if(c)return c.call(d);if("function"==typeof d.next)return d;if(!isNaN(d.length)){var Z=-1,G=function c(){for(;++Z<d.length;)if(b.call(d,Z))return c.value=d[Z],c.done=!1,c;return c.value=l,c.done=!0,c};return G.next=G}}return{next:T}}function T(){return{value:l,done:!0}}return V.prototype=s,K(a,"constructor",s),K(s,"constructor",V),V.displayName=K(s,m,"GeneratorFunction"),d.isGeneratorFunction=function(d){var l="function"==typeof d&&d.constructor;return!!l&&(l===V||"GeneratorFunction"===(l.displayName||l.name))},d.mark=function(d){return Object.setPrototypeOf?Object.setPrototypeOf(d,s):(d.__proto__=s,K(d,m,"GeneratorFunction")),d.prototype=Object.create(a),d},d.awrap=function(d){return{__await:d}},n(x.prototype),K(x.prototype,y,(function(){return this})),d.AsyncIterator=x,d.async=function(l,c,b,Z,X){void 0===X&&(X=Promise);var G=new x(p(l,c,b,Z),X);return d.isGeneratorFunction(c)?G:G.next().then((function(d){return d.done?d.value:G.next()}))},n(a),K(a,m,"Generator"),K(a,X,(function(){return this})),K(a,"toString",(function(){return"[object Generator]"})),d.keys=function(d){var l=[];for(var c in d)l.push(c);return l.reverse(),function c(){for(;l.length;){var b=l.pop();if(b in d)return c.value=b,c.done=!1,c}return c.done=!0,c}},d.values=z,R.prototype={constructor:R,reset:function(d){if(this.prev=0,this.next=0,this.sent=this._sent=l,this.done=!1,this.delegate=null,this.method="next",this.arg=l,this.tryEntries.forEach(g),!d)for(var c in this)"t"===c.charAt(0)&&b.call(this,c)&&!isNaN(+c.slice(1))&&(this[c]=l)},stop:function(){this.done=!0;var d=this.tryEntries[0].completion;if("throw"===d.type)throw d.arg;return this.rval},dispatchException:function(d){if(this.done)throw d;var c=this;function Z(b,Z){return y.type="throw",y.arg=d,c.next=b,Z&&(c.method="next",c.arg=l),!!Z}for(var X=this.tryEntries.length-1;X>=0;--X){var G=this.tryEntries[X],y=G.completion;if("root"===G.tryLoc)return Z("end");if(G.tryLoc<=this.prev){var m=b.call(G,"catchLoc"),K=b.call(G,"finallyLoc");if(m&&K){if(this.prev<G.catchLoc)return Z(G.catchLoc,!0);if(this.prev<G.finallyLoc)return Z(G.finallyLoc)}else if(m){if(this.prev<G.catchLoc)return Z(G.catchLoc,!0)}else{if(!K)throw new Error("try statement without catch or finally");if(this.prev<G.finallyLoc)return Z(G.finallyLoc)}}}},abrupt:function(d,l){for(var c=this.tryEntries.length-1;c>=0;--c){var Z=this.tryEntries[c];if(Z.tryLoc<=this.prev&&b.call(Z,"finallyLoc")&&this.prev<Z.finallyLoc){var X=Z;break}}X&&("break"===d||"continue"===d)&&X.tryLoc<=l&&l<=X.finallyLoc&&(X=null);var G=X?X.completion:{};return G.type=d,G.arg=l,X?(this.method="next",this.next=X.finallyLoc,h):this.complete(G)},complete:function(d,l){if("throw"===d.type)throw d.arg;return"break"===d.type||"continue"===d.type?this.next=d.arg:"return"===d.type?(this.rval=this.arg=d.arg,this.method="return",this.next="end"):"normal"===d.type&&l&&(this.next=l),h},finish:function(d){for(var l=this.tryEntries.length-1;l>=0;--l){var c=this.tryEntries[l];if(c.finallyLoc===d)return this.complete(c.completion,c.afterLoc),g(c),h}},catch:function(d){for(var l=this.tryEntries.length-1;l>=0;--l){var c=this.tryEntries[l];if(c.tryLoc===d){var b=c.completion;if("throw"===b.type){var Z=b.arg;g(c)}return Z}}throw new Error("illegal catch attempt")},delegateYield:function(d,c,b){return this.delegate={iterator:z(d),resultName:c,nextLoc:b},"next"===this.method&&(this.arg=l),h}},d}(d.exports);try{regeneratorRuntime=l}catch(d){"object"===("undefined"==typeof globalThis?"undefined":G(globalThis))?globalThis.regeneratorRuntime=l:Function("r","regeneratorRuntime = r")(l)}})),p=y((function(d){var l=Object.prototype.hasOwnProperty,c="~";function b(){}function Z(d,l,c){this.fn=d,this.context=l,this.once=c||!1}function X(d,l,b,X,G){if("function"!=typeof b)throw new TypeError("The listener must be a function");var y=new Z(b,X||d,G),m=c?c+l:l;return d._events[m]?d._events[m].fn?d._events[m]=[d._events[m],y]:d._events[m].push(y):(d._events[m]=y,d._eventsCount++),d}function G(d,l){0==--d._eventsCount?d._events=new b:delete d._events[l]}function y(){this._events=new b,this._eventsCount=0}Object.create&&(b.prototype=Object.create(null),(new b).__proto__||(c=!1)),y.prototype.eventNames=function(){var d,b,Z=[];if(0===this._eventsCount)return Z;for(b in d=this._events)l.call(d,b)&&Z.push(c?b.slice(1):b);return Object.getOwnPropertySymbols?Z.concat(Object.getOwnPropertySymbols(d)):Z},y.prototype.listeners=function(d){var l=c?c+d:d,b=this._events[l];if(!b)return[];if(b.fn)return[b.fn];for(var Z=0,X=b.length,G=new Array(X);Z<X;Z++)G[Z]=b[Z].fn;return G},y.prototype.listenerCount=function(d){var l=c?c+d:d,b=this._events[l];return b?b.fn?1:b.length:0},y.prototype.emit=function(d,l,b,Z,X,G){var y=c?c+d:d;if(!this._events[y])return!1;var m,K,p=this._events[y],t=arguments.length;if(p.fn){switch(p.once&&this.removeListener(d,p.fn,void 0,!0),t){case 1:return p.fn.call(p.context),!0;case 2:return p.fn.call(p.context,l),!0;case 3:return p.fn.call(p.context,l,b),!0;case 4:return p.fn.call(p.context,l,b,Z),!0;case 5:return p.fn.call(p.context,l,b,Z,X),!0;case 6:return p.fn.call(p.context,l,b,Z,X,G),!0}for(K=1,m=new Array(t-1);K<t;K++)m[K-1]=arguments[K];p.fn.apply(p.context,m)}else{var i,u=p.length;for(K=0;K<u;K++)switch(p[K].once&&this.removeListener(d,p[K].fn,void 0,!0),t){case 1:p[K].fn.call(p[K].context);break;case 2:p[K].fn.call(p[K].context,l);break;case 3:p[K].fn.call(p[K].context,l,b);break;case 4:p[K].fn.call(p[K].context,l,b,Z);break;default:if(!m)for(i=1,m=new Array(t-1);i<t;i++)m[i-1]=arguments[i];p[K].fn.apply(p[K].context,m)}}return!0},y.prototype.on=function(d,l,c){return X(this,d,l,c,!1)},y.prototype.once=function(d,l,c){return X(this,d,l,c,!0)},y.prototype.removeListener=function(d,l,b,Z){var X=c?c+d:d;if(!this._events[X])return this;if(!l)return G(this,X),this;var y=this._events[X];if(y.fn)y.fn!==l||Z&&!y.once||b&&y.context!==b||G(this,X);else{for(var m=0,K=[],p=y.length;m<p;m++)(y[m].fn!==l||Z&&!y[m].once||b&&y[m].context!==b)&&K.push(y[m]);K.length?this._events[X]=1===K.length?K[0]:K:G(this,X)}return this},y.prototype.removeAllListeners=function(d){var l;return d?(l=c?c+d:d,this._events[l]&&G(this,l)):(this._events=new b,this._eventsCount=0),this},y.prototype.off=y.prototype.removeListener,y.prototype.addListener=y.prototype.on,y.prefixed=c,y.EventEmitter=y,d.exports=y}));return function(){if("nodejs"!=("undefined"!=typeof window&&void 0!==window.document?"browser":"nodejs"))return null;function l(){return new p}function b(){var d,l,c=new Promise((function(){d=arguments[0],l=arguments[1]}));return c.resolve=d,c.reject=l,c}function Z(){for(var d=arguments.length>0&&void 0!==arguments[0]?arguments[0]:10,l=[],c="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""),b=c.length,Z=0;Z<d;Z++)l[Z]=c[0|Math.random()*b];return l.join("")}var G,y=(G="",Buffer.from(G,"base64").toString("utf8"));function t(){var c=l();function X(l){try{return new d.Worker(l,{eval:!0})}catch(d){u(d)}}var G=X(y);if(!G)return u("invalid worker"),null;function m(){G?(G.terminate(),G=void 0):u("worker has been terminated")}function K(){var d={mode:"init",type:"object",input:Array.prototype.slice.call(arguments)};G.postMessage(d)}function p(){var d=b(),l=Z(),X={mode:"call",id:l,fun:"PCA",input:Array.prototype.slice.call(arguments)};return G.postMessage(X),c.once(l,(function(l){"success"===l.state?d.resolve(l.msg):d.reject(l.msg)})),d}function t(){var d=b(),l=Z(),X={mode:"call",id:l,fun:"cluster",input:Array.prototype.slice.call(arguments)};return G.postMessage(X),c.once(l,(function(l){"success"===l.state?d.resolve(l.msg):d.reject(l.msg)})),d}function i(d){var l=d,b=l.mode;"emit"!==b&&"return"!==b||("emit"===b&&c.emit(l.evName,l.msg),"return"===b&&c.emit(l.id,l))}function u(d){c.emit("error",d)}return G.on("message",i),G.on("error",u),K(Array.prototype.slice.call(arguments)),c.PCA=p,c.cluster=t,c.terminate=m,c}var i,u,I={PCA:(u=X(K.mark((function d(){var l,b,Z,X=arguments;return K.wrap((function(d){for(;;)switch(d.prev=d.next){case 0:return l=Array.prototype.slice.call(X),b=t(),d.next=4,b.PCA.apply(b,c(l)).finally((function(){b.terminate()}));case 4:return Z=d.sent,d.abrupt("return",Z);case 6:case"end":return d.stop()}}),d)}))),function(){return u.apply(this,arguments)}),cluster:(i=X(K.mark((function d(){var l,b,Z,X=arguments;return K.wrap((function(d){for(;;)switch(d.prev=d.next){case 0:return l=Array.prototype.slice.call(X),b=t(),d.next=4,b.cluster.apply(b,c(l)).finally((function(){b.terminate()}));case 4:return Z=d.sent,d.abrupt("return",Z);case 6:case"end":return d.stop()}}),d)}))),function(){return i.apply(this,arguments)})};for(var o in m=l(),I){var h=I[o];m[o]=h}}(),m}(c.default)})),G=Z((function(d,l){d.exports=function(){function d(d,l){(null==l||l>d.length)&&(l=d.length);for(var c=0,b=new Array(l);c<l;c++)b[c]=d[c];return b}function l(l){return function(l){if(Array.isArray(l))return d(l)}(l)||function(d){if("undefined"!=typeof Symbol&&null!=d[Symbol.iterator]||null!=d["@@iterator"])return Array.from(d)}(l)||function(l,c){if(l){if("string"==typeof l)return d(l,c);var b=Object.prototype.toString.call(l).slice(8,-1);return"Object"===b&&l.constructor&&(b=l.constructor.name),"Map"===b||"Set"===b?Array.from(l):"Arguments"===b||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(b)?d(l,c):void 0}}(l)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function c(d,l,c,b,Z,X,G){try{var y=d[X](G),m=y.value}catch(d){return void c(d)}y.done?l(m):Promise.resolve(m).then(b,Z)}function Z(d){return function(){var l=this,b=arguments;return new Promise((function(Z,X){var G=d.apply(l,b);function y(d){c(G,Z,X,y,m,"next",d)}function m(d){c(G,Z,X,y,m,"throw",d)}y(void 0)}))}}function X(d){return X="function"==typeof Symbol&&"symbol"==b(Symbol.iterator)?function(d){return b(d)}:function(d){return d&&"function"==typeof Symbol&&d.constructor===Symbol&&d!==Symbol.prototype?"symbol":b(d)},X(d)}function G(d){var l={exports:{}};return d(l,l.exports),l.exports}var y,m,K=G((function(d){var l=function(d){var l,c=Object.prototype,b=c.hasOwnProperty,Z="function"==typeof Symbol?Symbol:{},G=Z.iterator||"@@iterator",y=Z.asyncIterator||"@@asyncIterator",m=Z.toStringTag||"@@toStringTag";function K(d,l,c){return Object.defineProperty(d,l,{value:c,enumerable:!0,configurable:!0,writable:!0}),d[l]}try{K({},"")}catch(d){K=function(d,l,c){return d[l]=c}}function p(d,l,c,b){var Z=l&&l.prototype instanceof W?l:W,X=Object.create(Z.prototype),G=new R(b||[]);return X._invoke=function(d,l,c){var b=i;return function(Z,X){if(b===I)throw new Error("Generator is already running");if(b===o){if("throw"===Z)throw X;return T()}for(c.method=Z,c.arg=X;;){var G=c.delegate;if(G){var y=S(G,c);if(y){if(y===h)continue;return y}}if("next"===c.method)c.sent=c._sent=c.arg;else if("throw"===c.method){if(b===i)throw b=o,c.arg;c.dispatchException(c.arg)}else"return"===c.method&&c.abrupt("return",c.arg);b=I;var m=t(d,l,c);if("normal"===m.type){if(b=c.done?o:u,m.arg===h)continue;return{value:m.arg,done:c.done}}"throw"===m.type&&(b=o,c.method="throw",c.arg=m.arg)}}}(d,c,G),X}function t(d,l,c){try{return{type:"normal",arg:d.call(l,c)}}catch(d){return{type:"throw",arg:d}}}d.wrap=p;var i="suspendedStart",u="suspendedYield",I="executing",o="completed",h={};function W(){}function V(){}function s(){}var H={};K(H,G,(function(){return this}));var L=Object.getPrototypeOf,C=L&&L(L(z([])));C&&C!==c&&b.call(C,G)&&(H=C);var a=s.prototype=W.prototype=Object.create(H);function n(d){["next","throw","return"].forEach((function(l){K(d,l,(function(d){return this._invoke(l,d)}))}))}function x(d,l){function c(Z,G,y,m){var K=t(d[Z],d,G);if("throw"!==K.type){var p=K.arg,i=p.value;return i&&"object"===X(i)&&b.call(i,"__await")?l.resolve(i.__await).then((function(d){c("next",d,y,m)}),(function(d){c("throw",d,y,m)})):l.resolve(i).then((function(d){p.value=d,y(p)}),(function(d){return c("throw",d,y,m)}))}m(K.arg)}var Z;this._invoke=function(d,b){function X(){return new l((function(l,Z){c(d,b,l,Z)}))}return Z=Z?Z.then(X,X):X()}}function S(d,c){var b=d.iterator[c.method];if(b===l){if(c.delegate=null,"throw"===c.method){if(d.iterator.return&&(c.method="return",c.arg=l,S(d,c),"throw"===c.method))return h;c.method="throw",c.arg=new TypeError("The iterator does not provide a 'throw' method")}return h}var Z=t(b,d.iterator,c.arg);if("throw"===Z.type)return c.method="throw",c.arg=Z.arg,c.delegate=null,h;var X=Z.arg;return X?X.done?(c[d.resultName]=X.value,c.next=d.nextLoc,"return"!==c.method&&(c.method="next",c.arg=l),c.delegate=null,h):X:(c.method="throw",c.arg=new TypeError("iterator result is not an object"),c.delegate=null,h)}function Y(d){var l={tryLoc:d[0]};1 in d&&(l.catchLoc=d[1]),2 in d&&(l.finallyLoc=d[2],l.afterLoc=d[3]),this.tryEntries.push(l)}function g(d){var l=d.completion||{};l.type="normal",delete l.arg,d.completion=l}function R(d){this.tryEntries=[{tryLoc:"root"}],d.forEach(Y,this),this.reset(!0)}function z(d){if(d){var c=d[G];if(c)return c.call(d);if("function"==typeof d.next)return d;if(!isNaN(d.length)){var Z=-1,X=function c(){for(;++Z<d.length;)if(b.call(d,Z))return c.value=d[Z],c.done=!1,c;return c.value=l,c.done=!0,c};return X.next=X}}return{next:T}}function T(){return{value:l,done:!0}}return V.prototype=s,K(a,"constructor",s),K(s,"constructor",V),V.displayName=K(s,m,"GeneratorFunction"),d.isGeneratorFunction=function(d){var l="function"==typeof d&&d.constructor;return!!l&&(l===V||"GeneratorFunction"===(l.displayName||l.name))},d.mark=function(d){return Object.setPrototypeOf?Object.setPrototypeOf(d,s):(d.__proto__=s,K(d,m,"GeneratorFunction")),d.prototype=Object.create(a),d},d.awrap=function(d){return{__await:d}},n(x.prototype),K(x.prototype,y,(function(){return this})),d.AsyncIterator=x,d.async=function(l,c,b,Z,X){void 0===X&&(X=Promise);var G=new x(p(l,c,b,Z),X);return d.isGeneratorFunction(c)?G:G.next().then((function(d){return d.done?d.value:G.next()}))},n(a),K(a,m,"Generator"),K(a,G,(function(){return this})),K(a,"toString",(function(){return"[object Generator]"})),d.keys=function(d){var l=[];for(var c in d)l.push(c);return l.reverse(),function c(){for(;l.length;){var b=l.pop();if(b in d)return c.value=b,c.done=!1,c}return c.done=!0,c}},d.values=z,R.prototype={constructor:R,reset:function(d){if(this.prev=0,this.next=0,this.sent=this._sent=l,this.done=!1,this.delegate=null,this.method="next",this.arg=l,this.tryEntries.forEach(g),!d)for(var c in this)"t"===c.charAt(0)&&b.call(this,c)&&!isNaN(+c.slice(1))&&(this[c]=l)},stop:function(){this.done=!0;var d=this.tryEntries[0].completion;if("throw"===d.type)throw d.arg;return this.rval},dispatchException:function(d){if(this.done)throw d;var c=this;function Z(b,Z){return y.type="throw",y.arg=d,c.next=b,Z&&(c.method="next",c.arg=l),!!Z}for(var X=this.tryEntries.length-1;X>=0;--X){var G=this.tryEntries[X],y=G.completion;if("root"===G.tryLoc)return Z("end");if(G.tryLoc<=this.prev){var m=b.call(G,"catchLoc"),K=b.call(G,"finallyLoc");if(m&&K){if(this.prev<G.catchLoc)return Z(G.catchLoc,!0);if(this.prev<G.finallyLoc)return Z(G.finallyLoc)}else if(m){if(this.prev<G.catchLoc)return Z(G.catchLoc,!0)}else{if(!K)throw new Error("try statement without catch or finally");if(this.prev<G.finallyLoc)return Z(G.finallyLoc)}}}},abrupt:function(d,l){for(var c=this.tryEntries.length-1;c>=0;--c){var Z=this.tryEntries[c];if(Z.tryLoc<=this.prev&&b.call(Z,"finallyLoc")&&this.prev<Z.finallyLoc){var X=Z;break}}X&&("break"===d||"continue"===d)&&X.tryLoc<=l&&l<=X.finallyLoc&&(X=null);var G=X?X.completion:{};return G.type=d,G.arg=l,X?(this.method="next",this.next=X.finallyLoc,h):this.complete(G)},complete:function(d,l){if("throw"===d.type)throw d.arg;return"break"===d.type||"continue"===d.type?this.next=d.arg:"return"===d.type?(this.rval=this.arg=d.arg,this.method="return",this.next="end"):"normal"===d.type&&l&&(this.next=l),h},finish:function(d){for(var l=this.tryEntries.length-1;l>=0;--l){var c=this.tryEntries[l];if(c.finallyLoc===d)return this.complete(c.completion,c.afterLoc),g(c),h}},catch:function(d){for(var l=this.tryEntries.length-1;l>=0;--l){var c=this.tryEntries[l];if(c.tryLoc===d){var b=c.completion;if("throw"===b.type){var Z=b.arg;g(c)}return Z}}throw new Error("illegal catch attempt")},delegateYield:function(d,c,b){return this.delegate={iterator:z(d),resultName:c,nextLoc:b},"next"===this.method&&(this.arg=l),h}},d}(d.exports);try{regeneratorRuntime=l}catch(d){"object"===("undefined"==typeof globalThis?"undefined":X(globalThis))?globalThis.regeneratorRuntime=l:Function("r","regeneratorRuntime = r")(l)}})),p="function"==typeof atob,t="function"==typeof Buffer,i="function"==typeof TextDecoder?new TextDecoder:void 0,u=("function"==typeof TextEncoder&&new TextEncoder,Array.prototype.slice.call("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=")),I=(y={},u.forEach((function(d,l){return y[d]=l})),y),o=/^(?:[A-Za-z\d+\/]{4})*?(?:[A-Za-z\d+\/]{2}(?:==)?|[A-Za-z\d+\/]{3}=?)?$/,h=String.fromCharCode.bind(String),W="function"==typeof Uint8Array.from?Uint8Array.from.bind(Uint8Array):function(d){var l=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(d){return d};return new Uint8Array(Array.prototype.slice.call(d,0).map(l))},V=function(d){return d.replace(/[^A-Za-z0-9\+\/]/g,"")},s=/[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g,H=function(d){switch(d.length){case 4:var l=((7&d.charCodeAt(0))<<18|(63&d.charCodeAt(1))<<12|(63&d.charCodeAt(2))<<6|63&d.charCodeAt(3))-65536;return h(55296+(l>>>10))+h(56320+(1023&l));case 3:return h((15&d.charCodeAt(0))<<12|(63&d.charCodeAt(1))<<6|63&d.charCodeAt(2));default:return h((31&d.charCodeAt(0))<<6|63&d.charCodeAt(1))}},L=function(d){return d.replace(s,H)},C=function(d){if(d=d.replace(/\s+/g,""),!o.test(d))throw new TypeError("malformed base64.");d+="==".slice(2-(3&d.length));for(var l,c,b,Z="",X=0;X<d.length;)l=I[d.charAt(X++)]<<18|I[d.charAt(X++)]<<12|(c=I[d.charAt(X++)])<<6|(b=I[d.charAt(X++)]),Z+=64===c?h(l>>16&255):64===b?h(l>>16&255,l>>8&255):h(l>>16&255,l>>8&255,255&l);return Z},a=p?function(d){return atob(V(d))}:t?function(d){return Buffer.from(d,"base64").toString("binary")}:C,n=t?function(d){return W(Buffer.from(d,"base64"))}:function(d){return W(a(d),(function(d){return d.charCodeAt(0)}))},x=t?function(d){return Buffer.from(d,"base64").toString("utf8")}:i?function(d){return i.decode(n(d))}:function(d){return L(a(d))},S=function(d){return V(d.replace(/[-_]/g,(function(d){return"-"==d?"+":"/"})))},Y=function(d){return x(S(d))},g=Y,R=G((function(d){var l=Object.prototype.hasOwnProperty,c="~";function b(){}function Z(d,l,c){this.fn=d,this.context=l,this.once=c||!1}function X(d,l,b,X,G){if("function"!=typeof b)throw new TypeError("The listener must be a function");var y=new Z(b,X||d,G),m=c?c+l:l;return d._events[m]?d._events[m].fn?d._events[m]=[d._events[m],y]:d._events[m].push(y):(d._events[m]=y,d._eventsCount++),d}function G(d,l){0==--d._eventsCount?d._events=new b:delete d._events[l]}function y(){this._events=new b,this._eventsCount=0}Object.create&&(b.prototype=Object.create(null),(new b).__proto__||(c=!1)),y.prototype.eventNames=function(){var d,b,Z=[];if(0===this._eventsCount)return Z;for(b in d=this._events)l.call(d,b)&&Z.push(c?b.slice(1):b);return Object.getOwnPropertySymbols?Z.concat(Object.getOwnPropertySymbols(d)):Z},y.prototype.listeners=function(d){var l=c?c+d:d,b=this._events[l];if(!b)return[];if(b.fn)return[b.fn];for(var Z=0,X=b.length,G=new Array(X);Z<X;Z++)G[Z]=b[Z].fn;return G},y.prototype.listenerCount=function(d){var l=c?c+d:d,b=this._events[l];return b?b.fn?1:b.length:0},y.prototype.emit=function(d,l,b,Z,X,G){var y=c?c+d:d;if(!this._events[y])return!1;var m,K,p=this._events[y],t=arguments.length;if(p.fn){switch(p.once&&this.removeListener(d,p.fn,void 0,!0),t){case 1:return p.fn.call(p.context),!0;case 2:return p.fn.call(p.context,l),!0;case 3:return p.fn.call(p.context,l,b),!0;case 4:return p.fn.call(p.context,l,b,Z),!0;case 5:return p.fn.call(p.context,l,b,Z,X),!0;case 6:return p.fn.call(p.context,l,b,Z,X,G),!0}for(K=1,m=new Array(t-1);K<t;K++)m[K-1]=arguments[K];p.fn.apply(p.context,m)}else{var i,u=p.length;for(K=0;K<u;K++)switch(p[K].once&&this.removeListener(d,p[K].fn,void 0,!0),t){case 1:p[K].fn.call(p[K].context);break;case 2:p[K].fn.call(p[K].context,l);break;case 3:p[K].fn.call(p[K].context,l,b);break;case 4:p[K].fn.call(p[K].context,l,b,Z);break;default:if(!m)for(i=1,m=new Array(t-1);i<t;i++)m[i-1]=arguments[i];p[K].fn.apply(p[K].context,m)}}return!0},y.prototype.on=function(d,l,c){return X(this,d,l,c,!1)},y.prototype.once=function(d,l,c){return X(this,d,l,c,!0)},y.prototype.removeListener=function(d,l,b,Z){var X=c?c+d:d;if(!this._events[X])return this;if(!l)return G(this,X),this;var y=this._events[X];if(y.fn)y.fn!==l||Z&&!y.once||b&&y.context!==b||G(this,X);else{for(var m=0,K=[],p=y.length;m<p;m++)(y[m].fn!==l||Z&&!y[m].once||b&&y[m].context!==b)&&K.push(y[m]);K.length?this._events[X]=1===K.length?K[0]:K:G(this,X)}return this},y.prototype.removeAllListeners=function(d){var l;return d?(l=c?c+d:d,this._events[l]&&G(this,l)):(this._events=new b,this._eventsCount=0),this},y.prototype.off=y.prototype.removeListener,y.prototype.addListener=y.prototype.on,y.prefixed=c,y.EventEmitter=y,d.exports=y}));return function(){if("browser"!=("undefined"!=typeof window&&void 0!==window.document?"browser":"nodejs"))return null;function d(){return new R}function c(){var d,l,c=new Promise((function(){d=arguments[0],l=arguments[1]}));return c.resolve=d,c.reject=l,c}function b(){for(var d=arguments.length>0&&void 0!==arguments[0]?arguments[0]:10,l=[],c="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""),b=c.length,Z=0;Z<d;Z++)l[Z]=c[0|Math.random()*b];return l.join("")}var X=g("");function G(){var l=d();function Z(d){try{var l=new Blob([d]),c=window.URL||window.webkitURL;return new Worker(c.createObjectURL(l))}catch(d){i(d)}}var G=Z(X);if(!G)return i("invalid worker"),null;function y(){G?(G.terminate(),G=void 0):i("worker has been terminated")}function m(){var d={mode:"init",type:"object",input:Array.prototype.slice.call(arguments)};G.postMessage(d)}function K(){var d=c(),Z=b(),X={mode:"call",id:Z,fun:"PCA",input:Array.prototype.slice.call(arguments)};return G.postMessage(X),l.once(Z,(function(l){"success"===l.state?d.resolve(l.msg):d.reject(l.msg)})),d}function p(){var d=c(),Z=b(),X={mode:"call",id:Z,fun:"cluster",input:Array.prototype.slice.call(arguments)};return G.postMessage(X),l.once(Z,(function(l){"success"===l.state?d.resolve(l.msg):d.reject(l.msg)})),d}function t(d){var c=d,b=c.mode;"emit"!==b&&"return"!==b||("emit"===b&&l.emit(c.evName,c.msg),"return"===b&&l.emit(c.id,c))}function i(d){l.emit("error",d)}return G.onmessage=function(d){t(d.data)},G.onerror=i,m(Array.prototype.slice.call(arguments)),l.PCA=K,l.cluster=p,l.terminate=y,l}var y,p,t={PCA:(p=Z(K.mark((function d(){var c,b,Z,X=arguments;return K.wrap((function(d){for(;;)switch(d.prev=d.next){case 0:return c=Array.prototype.slice.call(X),b=G(),d.next=4,b.PCA.apply(b,l(c)).finally((function(){b.terminate()}));case 4:return Z=d.sent,d.abrupt("return",Z);case 6:case"end":return d.stop()}}),d)}))),function(){return p.apply(this,arguments)}),cluster:(y=Z(K.mark((function d(){var c,b,Z,X=arguments;return K.wrap((function(d){for(;;)switch(d.prev=d.next){case 0:return c=Array.prototype.slice.call(X),b=G(),d.next=4,b.cluster.apply(b,l(c)).finally((function(){b.terminate()}));case 4:return Z=d.sent,d.abrupt("return",Z);case 6:case"end":return d.stop()}}),d)}))),function(){return y.apply(this,arguments)})};for(var i in m=d(),t){var u=t[i];m[i]=u}}(),m}()}));return"undefined"!=typeof window&&void 0!==window.document?G:X}));
