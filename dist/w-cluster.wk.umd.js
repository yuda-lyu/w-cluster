!function(d,l){"object"==typeof exports&&"undefined"!=typeof module?module.exports=l(require("worker_threads")):"function"==typeof define&&define.amd?define(["worker_threads"],l):(d="undefined"!=typeof globalThis?globalThis:d||self)["w-cluster"]=l(d.worker_threads)}(this,(function(d){"use strict";function l(d){return d&&"object"==typeof d&&"default"in d?d:{default:d}}var c=l(d);function b(d){return b="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(d){return typeof d}:function(d){return d&&"function"==typeof Symbol&&d.constructor===Symbol&&d!==Symbol.prototype?"symbol":typeof d},b(d)}"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self&&self;function Z(d){var l={exports:{}};return d(l,l.exports),l.exports}var X=Z((function(d,l){d.exports=function(d){function l(d,l){(null==l||l>d.length)&&(l=d.length);for(var c=0,b=new Array(l);c<l;c++)b[c]=d[c];return b}function c(d){return function(d){if(Array.isArray(d))return l(d)}(d)||function(d){if("undefined"!=typeof Symbol&&null!=d[Symbol.iterator]||null!=d["@@iterator"])return Array.from(d)}(d)||function(d,c){if(d){if("string"==typeof d)return l(d,c);var b=Object.prototype.toString.call(d).slice(8,-1);return"Object"===b&&d.constructor&&(b=d.constructor.name),"Map"===b||"Set"===b?Array.from(d):"Arguments"===b||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(b)?l(d,c):void 0}}(d)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Z(d,l,c,b,Z,X,y){try{var G=d[X](y),m=G.value}catch(d){return void c(d)}G.done?l(m):Promise.resolve(m).then(b,Z)}function X(d){return function(){var l=this,c=arguments;return new Promise((function(b,X){var y=d.apply(l,c);function G(d){Z(y,b,X,G,m,"next",d)}function m(d){Z(y,b,X,G,m,"throw",d)}G(void 0)}))}}function y(d){return y="function"==typeof Symbol&&"symbol"==b(Symbol.iterator)?function(d){return b(d)}:function(d){return d&&"function"==typeof Symbol&&d.constructor===Symbol&&d!==Symbol.prototype?"symbol":b(d)},y(d)}function G(d){var l={exports:{}};return d(l,l.exports),l.exports}var m,K=G((function(d){var l=function(d){var l,c=Object.prototype,b=c.hasOwnProperty,Z="function"==typeof Symbol?Symbol:{},X=Z.iterator||"@@iterator",G=Z.asyncIterator||"@@asyncIterator",m=Z.toStringTag||"@@toStringTag";function K(d,l,c){return Object.defineProperty(d,l,{value:c,enumerable:!0,configurable:!0,writable:!0}),d[l]}try{K({},"")}catch(d){K=function(d,l,c){return d[l]=c}}function p(d,l,c,b){var Z=l&&l.prototype instanceof u?l:u,X=Object.create(Z.prototype),y=new R(b||[]);return X._invoke=function(d,l,c){var b=i;return function(Z,X){if(b===h)throw new Error("Generator is already running");if(b===I){if("throw"===Z)throw X;return J()}for(c.method=Z,c.arg=X;;){var y=c.delegate;if(y){var G=S(y,c);if(G){if(G===W)continue;return G}}if("next"===c.method)c.sent=c._sent=c.arg;else if("throw"===c.method){if(b===i)throw b=I,c.arg;c.dispatchException(c.arg)}else"return"===c.method&&c.abrupt("return",c.arg);b=h;var m=t(d,l,c);if("normal"===m.type){if(b=c.done?I:o,m.arg===W)continue;return{value:m.arg,done:c.done}}"throw"===m.type&&(b=I,c.method="throw",c.arg=m.arg)}}}(d,c,y),X}function t(d,l,c){try{return{type:"normal",arg:d.call(l,c)}}catch(d){return{type:"throw",arg:d}}}d.wrap=p;var i="suspendedStart",o="suspendedYield",h="executing",I="completed",W={};function u(){}function V(){}function s(){}var H={};K(H,X,(function(){return this}));var C=Object.getPrototypeOf,a=C&&C(C(z([])));a&&a!==c&&b.call(a,X)&&(H=a);var L=s.prototype=u.prototype=Object.create(H);function n(d){["next","throw","return"].forEach((function(l){K(d,l,(function(d){return this._invoke(l,d)}))}))}function x(d,l){function c(Z,X,G,m){var K=t(d[Z],d,X);if("throw"!==K.type){var p=K.arg,i=p.value;return i&&"object"===y(i)&&b.call(i,"__await")?l.resolve(i.__await).then((function(d){c("next",d,G,m)}),(function(d){c("throw",d,G,m)})):l.resolve(i).then((function(d){p.value=d,G(p)}),(function(d){return c("throw",d,G,m)}))}m(K.arg)}var Z;this._invoke=function(d,b){function X(){return new l((function(l,Z){c(d,b,l,Z)}))}return Z=Z?Z.then(X,X):X()}}function S(d,c){var b=d.iterator[c.method];if(b===l){if(c.delegate=null,"throw"===c.method){if(d.iterator.return&&(c.method="return",c.arg=l,S(d,c),"throw"===c.method))return W;c.method="throw",c.arg=new TypeError("The iterator does not provide a 'throw' method")}return W}var Z=t(b,d.iterator,c.arg);if("throw"===Z.type)return c.method="throw",c.arg=Z.arg,c.delegate=null,W;var X=Z.arg;return X?X.done?(c[d.resultName]=X.value,c.next=d.nextLoc,"return"!==c.method&&(c.method="next",c.arg=l),c.delegate=null,W):X:(c.method="throw",c.arg=new TypeError("iterator result is not an object"),c.delegate=null,W)}function Y(d){var l={tryLoc:d[0]};1 in d&&(l.catchLoc=d[1]),2 in d&&(l.finallyLoc=d[2],l.afterLoc=d[3]),this.tryEntries.push(l)}function g(d){var l=d.completion||{};l.type="normal",delete l.arg,d.completion=l}function R(d){this.tryEntries=[{tryLoc:"root"}],d.forEach(Y,this),this.reset(!0)}function z(d){if(d){var c=d[X];if(c)return c.call(d);if("function"==typeof d.next)return d;if(!isNaN(d.length)){var Z=-1,y=function c(){for(;++Z<d.length;)if(b.call(d,Z))return c.value=d[Z],c.done=!1,c;return c.value=l,c.done=!0,c};return y.next=y}}return{next:J}}function J(){return{value:l,done:!0}}return V.prototype=s,K(L,"constructor",s),K(s,"constructor",V),V.displayName=K(s,m,"GeneratorFunction"),d.isGeneratorFunction=function(d){var l="function"==typeof d&&d.constructor;return!!l&&(l===V||"GeneratorFunction"===(l.displayName||l.name))},d.mark=function(d){return Object.setPrototypeOf?Object.setPrototypeOf(d,s):(d.__proto__=s,K(d,m,"GeneratorFunction")),d.prototype=Object.create(L),d},d.awrap=function(d){return{__await:d}},n(x.prototype),K(x.prototype,G,(function(){return this})),d.AsyncIterator=x,d.async=function(l,c,b,Z,X){void 0===X&&(X=Promise);var y=new x(p(l,c,b,Z),X);return d.isGeneratorFunction(c)?y:y.next().then((function(d){return d.done?d.value:y.next()}))},n(L),K(L,m,"Generator"),K(L,X,(function(){return this})),K(L,"toString",(function(){return"[object Generator]"})),d.keys=function(d){var l=[];for(var c in d)l.push(c);return l.reverse(),function c(){for(;l.length;){var b=l.pop();if(b in d)return c.value=b,c.done=!1,c}return c.done=!0,c}},d.values=z,R.prototype={constructor:R,reset:function(d){if(this.prev=0,this.next=0,this.sent=this._sent=l,this.done=!1,this.delegate=null,this.method="next",this.arg=l,this.tryEntries.forEach(g),!d)for(var c in this)"t"===c.charAt(0)&&b.call(this,c)&&!isNaN(+c.slice(1))&&(this[c]=l)},stop:function(){this.done=!0;var d=this.tryEntries[0].completion;if("throw"===d.type)throw d.arg;return this.rval},dispatchException:function(d){if(this.done)throw d;var c=this;function Z(b,Z){return G.type="throw",G.arg=d,c.next=b,Z&&(c.method="next",c.arg=l),!!Z}for(var X=this.tryEntries.length-1;X>=0;--X){var y=this.tryEntries[X],G=y.completion;if("root"===y.tryLoc)return Z("end");if(y.tryLoc<=this.prev){var m=b.call(y,"catchLoc"),K=b.call(y,"finallyLoc");if(m&&K){if(this.prev<y.catchLoc)return Z(y.catchLoc,!0);if(this.prev<y.finallyLoc)return Z(y.finallyLoc)}else if(m){if(this.prev<y.catchLoc)return Z(y.catchLoc,!0)}else{if(!K)throw new Error("try statement without catch or finally");if(this.prev<y.finallyLoc)return Z(y.finallyLoc)}}}},abrupt:function(d,l){for(var c=this.tryEntries.length-1;c>=0;--c){var Z=this.tryEntries[c];if(Z.tryLoc<=this.prev&&b.call(Z,"finallyLoc")&&this.prev<Z.finallyLoc){var X=Z;break}}X&&("break"===d||"continue"===d)&&X.tryLoc<=l&&l<=X.finallyLoc&&(X=null);var y=X?X.completion:{};return y.type=d,y.arg=l,X?(this.method="next",this.next=X.finallyLoc,W):this.complete(y)},complete:function(d,l){if("throw"===d.type)throw d.arg;return"break"===d.type||"continue"===d.type?this.next=d.arg:"return"===d.type?(this.rval=this.arg=d.arg,this.method="return",this.next="end"):"normal"===d.type&&l&&(this.next=l),W},finish:function(d){for(var l=this.tryEntries.length-1;l>=0;--l){var c=this.tryEntries[l];if(c.finallyLoc===d)return this.complete(c.completion,c.afterLoc),g(c),W}},catch:function(d){for(var l=this.tryEntries.length-1;l>=0;--l){var c=this.tryEntries[l];if(c.tryLoc===d){var b=c.completion;if("throw"===b.type){var Z=b.arg;g(c)}return Z}}throw new Error("illegal catch attempt")},delegateYield:function(d,c,b){return this.delegate={iterator:z(d),resultName:c,nextLoc:b},"next"===this.method&&(this.arg=l),W}},d}(d.exports);try{regeneratorRuntime=l}catch(d){"object"===("undefined"==typeof globalThis?"undefined":y(globalThis))?globalThis.regeneratorRuntime=l:Function("r","regeneratorRuntime = r")(l)}})),p=G((function(d){var l=Object.prototype.hasOwnProperty,c="~";function b(){}function Z(d,l,c){this.fn=d,this.context=l,this.once=c||!1}function X(d,l,b,X,y){if("function"!=typeof b)throw new TypeError("The listener must be a function");var G=new Z(b,X||d,y),m=c?c+l:l;return d._events[m]?d._events[m].fn?d._events[m]=[d._events[m],G]:d._events[m].push(G):(d._events[m]=G,d._eventsCount++),d}function y(d,l){0==--d._eventsCount?d._events=new b:delete d._events[l]}function G(){this._events=new b,this._eventsCount=0}Object.create&&(b.prototype=Object.create(null),(new b).__proto__||(c=!1)),G.prototype.eventNames=function(){var d,b,Z=[];if(0===this._eventsCount)return Z;for(b in d=this._events)l.call(d,b)&&Z.push(c?b.slice(1):b);return Object.getOwnPropertySymbols?Z.concat(Object.getOwnPropertySymbols(d)):Z},G.prototype.listeners=function(d){var l=c?c+d:d,b=this._events[l];if(!b)return[];if(b.fn)return[b.fn];for(var Z=0,X=b.length,y=new Array(X);Z<X;Z++)y[Z]=b[Z].fn;return y},G.prototype.listenerCount=function(d){var l=c?c+d:d,b=this._events[l];return b?b.fn?1:b.length:0},G.prototype.emit=function(d,l,b,Z,X,y){var G=c?c+d:d;if(!this._events[G])return!1;var m,K,p=this._events[G],t=arguments.length;if(p.fn){switch(p.once&&this.removeListener(d,p.fn,void 0,!0),t){case 1:return p.fn.call(p.context),!0;case 2:return p.fn.call(p.context,l),!0;case 3:return p.fn.call(p.context,l,b),!0;case 4:return p.fn.call(p.context,l,b,Z),!0;case 5:return p.fn.call(p.context,l,b,Z,X),!0;case 6:return p.fn.call(p.context,l,b,Z,X,y),!0}for(K=1,m=new Array(t-1);K<t;K++)m[K-1]=arguments[K];p.fn.apply(p.context,m)}else{var i,o=p.length;for(K=0;K<o;K++)switch(p[K].once&&this.removeListener(d,p[K].fn,void 0,!0),t){case 1:p[K].fn.call(p[K].context);break;case 2:p[K].fn.call(p[K].context,l);break;case 3:p[K].fn.call(p[K].context,l,b);break;case 4:p[K].fn.call(p[K].context,l,b,Z);break;default:if(!m)for(i=1,m=new Array(t-1);i<t;i++)m[i-1]=arguments[i];p[K].fn.apply(p[K].context,m)}}return!0},G.prototype.on=function(d,l,c){return X(this,d,l,c,!1)},G.prototype.once=function(d,l,c){return X(this,d,l,c,!0)},G.prototype.removeListener=function(d,l,b,Z){var X=c?c+d:d;if(!this._events[X])return this;if(!l)return y(this,X),this;var G=this._events[X];if(G.fn)G.fn!==l||Z&&!G.once||b&&G.context!==b||y(this,X);else{for(var m=0,K=[],p=G.length;m<p;m++)(G[m].fn!==l||Z&&!G[m].once||b&&G[m].context!==b)&&K.push(G[m]);K.length?this._events[X]=1===K.length?K[0]:K:y(this,X)}return this},G.prototype.removeAllListeners=function(d){var l;return d?(l=c?c+d:d,this._events[l]&&y(this,l)):(this._events=new b,this._eventsCount=0),this},G.prototype.off=G.prototype.removeListener,G.prototype.addListener=G.prototype.on,G.prefixed=c,G.EventEmitter=G,d.exports=G}));return function(){if("nodejs"!=("undefined"!=typeof window&&void 0!==window.document?"browser":"nodejs"))return null;function l(){return new p}function b(){var d,l,c=new Promise((function(){d=arguments[0],l=arguments[1]}));return c.resolve=d,c.reject=l,c}function Z(){for(var d=arguments.length>0&&void 0!==arguments[0]?arguments[0]:10,l=[],c="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""),b=c.length,Z=0;Z<d;Z++)l[Z]=c[0|Math.random()*b];return l.join("")}var y,G=(y="",Buffer.from(y,"base64").toString("utf8"));function t(){var c=l();function X(l){try{return new d.Worker(l,{eval:!0})}catch(d){o(d)}}var y=X(G);if(!y)return o("invalid worker"),null;function m(){y?(y.terminate(),y=void 0):o("worker has been terminated")}function K(){var d={mode:"init",type:"object",input:Array.prototype.slice.call(arguments)};y.postMessage(d)}function p(){var d=b(),l=Z(),X={mode:"call",id:l,fun:"PCA",input:Array.prototype.slice.call(arguments)};return y.postMessage(X),c.once(l,(function(l){"success"===l.state?d.resolve(l.msg):d.reject(l.msg)})),d}function t(){var d=b(),l=Z(),X={mode:"call",id:l,fun:"cluster",input:Array.prototype.slice.call(arguments)};return y.postMessage(X),c.once(l,(function(l){"success"===l.state?d.resolve(l.msg):d.reject(l.msg)})),d}function i(d){var l=d,b=l.mode;"emit"!==b&&"return"!==b||("emit"===b&&c.emit(l.evName,l.msg),"return"===b&&c.emit(l.id,l))}function o(d){c.emit("error",d)}return y.on("message",i),y.on("error",o),K(Array.prototype.slice.call(arguments)),c.PCA=p,c.cluster=t,c.terminate=m,c}var i,o,h={PCA:(o=X(K.mark((function d(){var l,b,Z,X=arguments;return K.wrap((function(d){for(;;)switch(d.prev=d.next){case 0:return l=Array.prototype.slice.call(X),b=t(),d.next=4,b.PCA.apply(b,c(l)).finally((function(){b.terminate()}));case 4:return Z=d.sent,d.abrupt("return",Z);case 6:case"end":return d.stop()}}),d)}))),function(){return o.apply(this,arguments)}),cluster:(i=X(K.mark((function d(){var l,b,Z,X=arguments;return K.wrap((function(d){for(;;)switch(d.prev=d.next){case 0:return l=Array.prototype.slice.call(X),b=t(),d.next=4,b.cluster.apply(b,c(l)).finally((function(){b.terminate()}));case 4:return Z=d.sent,d.abrupt("return",Z);case 6:case"end":return d.stop()}}),d)}))),function(){return i.apply(this,arguments)})};for(var I in m=l(),h){var W=h[I];m[I]=W}}(),m}(c.default)})),y=Z((function(d,l){d.exports=function(){function d(d,l){(null==l||l>d.length)&&(l=d.length);for(var c=0,b=new Array(l);c<l;c++)b[c]=d[c];return b}function l(l){return function(l){if(Array.isArray(l))return d(l)}(l)||function(d){if("undefined"!=typeof Symbol&&null!=d[Symbol.iterator]||null!=d["@@iterator"])return Array.from(d)}(l)||function(l,c){if(l){if("string"==typeof l)return d(l,c);var b=Object.prototype.toString.call(l).slice(8,-1);return"Object"===b&&l.constructor&&(b=l.constructor.name),"Map"===b||"Set"===b?Array.from(l):"Arguments"===b||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(b)?d(l,c):void 0}}(l)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function c(d,l,c,b,Z,X,y){try{var G=d[X](y),m=G.value}catch(d){return void c(d)}G.done?l(m):Promise.resolve(m).then(b,Z)}function Z(d){return function(){var l=this,b=arguments;return new Promise((function(Z,X){var y=d.apply(l,b);function G(d){c(y,Z,X,G,m,"next",d)}function m(d){c(y,Z,X,G,m,"throw",d)}G(void 0)}))}}function X(d){return X="function"==typeof Symbol&&"symbol"==b(Symbol.iterator)?function(d){return b(d)}:function(d){return d&&"function"==typeof Symbol&&d.constructor===Symbol&&d!==Symbol.prototype?"symbol":b(d)},X(d)}function y(d){var l={exports:{}};return d(l,l.exports),l.exports}var G,m,K=y((function(d){var l=function(d){var l,c=Object.prototype,b=c.hasOwnProperty,Z="function"==typeof Symbol?Symbol:{},y=Z.iterator||"@@iterator",G=Z.asyncIterator||"@@asyncIterator",m=Z.toStringTag||"@@toStringTag";function K(d,l,c){return Object.defineProperty(d,l,{value:c,enumerable:!0,configurable:!0,writable:!0}),d[l]}try{K({},"")}catch(d){K=function(d,l,c){return d[l]=c}}function p(d,l,c,b){var Z=l&&l.prototype instanceof u?l:u,X=Object.create(Z.prototype),y=new R(b||[]);return X._invoke=function(d,l,c){var b=i;return function(Z,X){if(b===h)throw new Error("Generator is already running");if(b===I){if("throw"===Z)throw X;return J()}for(c.method=Z,c.arg=X;;){var y=c.delegate;if(y){var G=S(y,c);if(G){if(G===W)continue;return G}}if("next"===c.method)c.sent=c._sent=c.arg;else if("throw"===c.method){if(b===i)throw b=I,c.arg;c.dispatchException(c.arg)}else"return"===c.method&&c.abrupt("return",c.arg);b=h;var m=t(d,l,c);if("normal"===m.type){if(b=c.done?I:o,m.arg===W)continue;return{value:m.arg,done:c.done}}"throw"===m.type&&(b=I,c.method="throw",c.arg=m.arg)}}}(d,c,y),X}function t(d,l,c){try{return{type:"normal",arg:d.call(l,c)}}catch(d){return{type:"throw",arg:d}}}d.wrap=p;var i="suspendedStart",o="suspendedYield",h="executing",I="completed",W={};function u(){}function V(){}function s(){}var H={};K(H,y,(function(){return this}));var C=Object.getPrototypeOf,a=C&&C(C(z([])));a&&a!==c&&b.call(a,y)&&(H=a);var L=s.prototype=u.prototype=Object.create(H);function n(d){["next","throw","return"].forEach((function(l){K(d,l,(function(d){return this._invoke(l,d)}))}))}function x(d,l){function c(Z,y,G,m){var K=t(d[Z],d,y);if("throw"!==K.type){var p=K.arg,i=p.value;return i&&"object"===X(i)&&b.call(i,"__await")?l.resolve(i.__await).then((function(d){c("next",d,G,m)}),(function(d){c("throw",d,G,m)})):l.resolve(i).then((function(d){p.value=d,G(p)}),(function(d){return c("throw",d,G,m)}))}m(K.arg)}var Z;this._invoke=function(d,b){function X(){return new l((function(l,Z){c(d,b,l,Z)}))}return Z=Z?Z.then(X,X):X()}}function S(d,c){var b=d.iterator[c.method];if(b===l){if(c.delegate=null,"throw"===c.method){if(d.iterator.return&&(c.method="return",c.arg=l,S(d,c),"throw"===c.method))return W;c.method="throw",c.arg=new TypeError("The iterator does not provide a 'throw' method")}return W}var Z=t(b,d.iterator,c.arg);if("throw"===Z.type)return c.method="throw",c.arg=Z.arg,c.delegate=null,W;var X=Z.arg;return X?X.done?(c[d.resultName]=X.value,c.next=d.nextLoc,"return"!==c.method&&(c.method="next",c.arg=l),c.delegate=null,W):X:(c.method="throw",c.arg=new TypeError("iterator result is not an object"),c.delegate=null,W)}function Y(d){var l={tryLoc:d[0]};1 in d&&(l.catchLoc=d[1]),2 in d&&(l.finallyLoc=d[2],l.afterLoc=d[3]),this.tryEntries.push(l)}function g(d){var l=d.completion||{};l.type="normal",delete l.arg,d.completion=l}function R(d){this.tryEntries=[{tryLoc:"root"}],d.forEach(Y,this),this.reset(!0)}function z(d){if(d){var c=d[y];if(c)return c.call(d);if("function"==typeof d.next)return d;if(!isNaN(d.length)){var Z=-1,X=function c(){for(;++Z<d.length;)if(b.call(d,Z))return c.value=d[Z],c.done=!1,c;return c.value=l,c.done=!0,c};return X.next=X}}return{next:J}}function J(){return{value:l,done:!0}}return V.prototype=s,K(L,"constructor",s),K(s,"constructor",V),V.displayName=K(s,m,"GeneratorFunction"),d.isGeneratorFunction=function(d){var l="function"==typeof d&&d.constructor;return!!l&&(l===V||"GeneratorFunction"===(l.displayName||l.name))},d.mark=function(d){return Object.setPrototypeOf?Object.setPrototypeOf(d,s):(d.__proto__=s,K(d,m,"GeneratorFunction")),d.prototype=Object.create(L),d},d.awrap=function(d){return{__await:d}},n(x.prototype),K(x.prototype,G,(function(){return this})),d.AsyncIterator=x,d.async=function(l,c,b,Z,X){void 0===X&&(X=Promise);var y=new x(p(l,c,b,Z),X);return d.isGeneratorFunction(c)?y:y.next().then((function(d){return d.done?d.value:y.next()}))},n(L),K(L,m,"Generator"),K(L,y,(function(){return this})),K(L,"toString",(function(){return"[object Generator]"})),d.keys=function(d){var l=[];for(var c in d)l.push(c);return l.reverse(),function c(){for(;l.length;){var b=l.pop();if(b in d)return c.value=b,c.done=!1,c}return c.done=!0,c}},d.values=z,R.prototype={constructor:R,reset:function(d){if(this.prev=0,this.next=0,this.sent=this._sent=l,this.done=!1,this.delegate=null,this.method="next",this.arg=l,this.tryEntries.forEach(g),!d)for(var c in this)"t"===c.charAt(0)&&b.call(this,c)&&!isNaN(+c.slice(1))&&(this[c]=l)},stop:function(){this.done=!0;var d=this.tryEntries[0].completion;if("throw"===d.type)throw d.arg;return this.rval},dispatchException:function(d){if(this.done)throw d;var c=this;function Z(b,Z){return G.type="throw",G.arg=d,c.next=b,Z&&(c.method="next",c.arg=l),!!Z}for(var X=this.tryEntries.length-1;X>=0;--X){var y=this.tryEntries[X],G=y.completion;if("root"===y.tryLoc)return Z("end");if(y.tryLoc<=this.prev){var m=b.call(y,"catchLoc"),K=b.call(y,"finallyLoc");if(m&&K){if(this.prev<y.catchLoc)return Z(y.catchLoc,!0);if(this.prev<y.finallyLoc)return Z(y.finallyLoc)}else if(m){if(this.prev<y.catchLoc)return Z(y.catchLoc,!0)}else{if(!K)throw new Error("try statement without catch or finally");if(this.prev<y.finallyLoc)return Z(y.finallyLoc)}}}},abrupt:function(d,l){for(var c=this.tryEntries.length-1;c>=0;--c){var Z=this.tryEntries[c];if(Z.tryLoc<=this.prev&&b.call(Z,"finallyLoc")&&this.prev<Z.finallyLoc){var X=Z;break}}X&&("break"===d||"continue"===d)&&X.tryLoc<=l&&l<=X.finallyLoc&&(X=null);var y=X?X.completion:{};return y.type=d,y.arg=l,X?(this.method="next",this.next=X.finallyLoc,W):this.complete(y)},complete:function(d,l){if("throw"===d.type)throw d.arg;return"break"===d.type||"continue"===d.type?this.next=d.arg:"return"===d.type?(this.rval=this.arg=d.arg,this.method="return",this.next="end"):"normal"===d.type&&l&&(this.next=l),W},finish:function(d){for(var l=this.tryEntries.length-1;l>=0;--l){var c=this.tryEntries[l];if(c.finallyLoc===d)return this.complete(c.completion,c.afterLoc),g(c),W}},catch:function(d){for(var l=this.tryEntries.length-1;l>=0;--l){var c=this.tryEntries[l];if(c.tryLoc===d){var b=c.completion;if("throw"===b.type){var Z=b.arg;g(c)}return Z}}throw new Error("illegal catch attempt")},delegateYield:function(d,c,b){return this.delegate={iterator:z(d),resultName:c,nextLoc:b},"next"===this.method&&(this.arg=l),W}},d}(d.exports);try{regeneratorRuntime=l}catch(d){"object"===("undefined"==typeof globalThis?"undefined":X(globalThis))?globalThis.regeneratorRuntime=l:Function("r","regeneratorRuntime = r")(l)}})),p="function"==typeof atob,t="function"==typeof Buffer,i="function"==typeof TextDecoder?new TextDecoder:void 0,o=("function"==typeof TextEncoder&&new TextEncoder,Array.prototype.slice.call("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=")),h=(G={},o.forEach((function(d,l){return G[d]=l})),G),I=/^(?:[A-Za-z\d+\/]{4})*?(?:[A-Za-z\d+\/]{2}(?:==)?|[A-Za-z\d+\/]{3}=?)?$/,W=String.fromCharCode.bind(String),u="function"==typeof Uint8Array.from?Uint8Array.from.bind(Uint8Array):function(d){var l=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(d){return d};return new Uint8Array(Array.prototype.slice.call(d,0).map(l))},V=function(d){return d.replace(/[^A-Za-z0-9\+\/]/g,"")},s=/[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g,H=function(d){switch(d.length){case 4:var l=((7&d.charCodeAt(0))<<18|(63&d.charCodeAt(1))<<12|(63&d.charCodeAt(2))<<6|63&d.charCodeAt(3))-65536;return W(55296+(l>>>10))+W(56320+(1023&l));case 3:return W((15&d.charCodeAt(0))<<12|(63&d.charCodeAt(1))<<6|63&d.charCodeAt(2));default:return W((31&d.charCodeAt(0))<<6|63&d.charCodeAt(1))}},C=function(d){return d.replace(s,H)},a=function(d){if(d=d.replace(/\s+/g,""),!I.test(d))throw new TypeError("malformed base64.");d+="==".slice(2-(3&d.length));for(var l,c,b,Z="",X=0;X<d.length;)l=h[d.charAt(X++)]<<18|h[d.charAt(X++)]<<12|(c=h[d.charAt(X++)])<<6|(b=h[d.charAt(X++)]),Z+=64===c?W(l>>16&255):64===b?W(l>>16&255,l>>8&255):W(l>>16&255,l>>8&255,255&l);return Z},L=p?function(d){return atob(V(d))}:t?function(d){return Buffer.from(d,"base64").toString("binary")}:a,n=t?function(d){return u(Buffer.from(d,"base64"))}:function(d){return u(L(d),(function(d){return d.charCodeAt(0)}))},x=t?function(d){return Buffer.from(d,"base64").toString("utf8")}:i?function(d){return i.decode(n(d))}:function(d){return C(L(d))},S=function(d){return V(d.replace(/[-_]/g,(function(d){return"-"==d?"+":"/"})))},Y=function(d){return x(S(d))},g=Y,R=y((function(d){var l=Object.prototype.hasOwnProperty,c="~";function b(){}function Z(d,l,c){this.fn=d,this.context=l,this.once=c||!1}function X(d,l,b,X,y){if("function"!=typeof b)throw new TypeError("The listener must be a function");var G=new Z(b,X||d,y),m=c?c+l:l;return d._events[m]?d._events[m].fn?d._events[m]=[d._events[m],G]:d._events[m].push(G):(d._events[m]=G,d._eventsCount++),d}function y(d,l){0==--d._eventsCount?d._events=new b:delete d._events[l]}function G(){this._events=new b,this._eventsCount=0}Object.create&&(b.prototype=Object.create(null),(new b).__proto__||(c=!1)),G.prototype.eventNames=function(){var d,b,Z=[];if(0===this._eventsCount)return Z;for(b in d=this._events)l.call(d,b)&&Z.push(c?b.slice(1):b);return Object.getOwnPropertySymbols?Z.concat(Object.getOwnPropertySymbols(d)):Z},G.prototype.listeners=function(d){var l=c?c+d:d,b=this._events[l];if(!b)return[];if(b.fn)return[b.fn];for(var Z=0,X=b.length,y=new Array(X);Z<X;Z++)y[Z]=b[Z].fn;return y},G.prototype.listenerCount=function(d){var l=c?c+d:d,b=this._events[l];return b?b.fn?1:b.length:0},G.prototype.emit=function(d,l,b,Z,X,y){var G=c?c+d:d;if(!this._events[G])return!1;var m,K,p=this._events[G],t=arguments.length;if(p.fn){switch(p.once&&this.removeListener(d,p.fn,void 0,!0),t){case 1:return p.fn.call(p.context),!0;case 2:return p.fn.call(p.context,l),!0;case 3:return p.fn.call(p.context,l,b),!0;case 4:return p.fn.call(p.context,l,b,Z),!0;case 5:return p.fn.call(p.context,l,b,Z,X),!0;case 6:return p.fn.call(p.context,l,b,Z,X,y),!0}for(K=1,m=new Array(t-1);K<t;K++)m[K-1]=arguments[K];p.fn.apply(p.context,m)}else{var i,o=p.length;for(K=0;K<o;K++)switch(p[K].once&&this.removeListener(d,p[K].fn,void 0,!0),t){case 1:p[K].fn.call(p[K].context);break;case 2:p[K].fn.call(p[K].context,l);break;case 3:p[K].fn.call(p[K].context,l,b);break;case 4:p[K].fn.call(p[K].context,l,b,Z);break;default:if(!m)for(i=1,m=new Array(t-1);i<t;i++)m[i-1]=arguments[i];p[K].fn.apply(p[K].context,m)}}return!0},G.prototype.on=function(d,l,c){return X(this,d,l,c,!1)},G.prototype.once=function(d,l,c){return X(this,d,l,c,!0)},G.prototype.removeListener=function(d,l,b,Z){var X=c?c+d:d;if(!this._events[X])return this;if(!l)return y(this,X),this;var G=this._events[X];if(G.fn)G.fn!==l||Z&&!G.once||b&&G.context!==b||y(this,X);else{for(var m=0,K=[],p=G.length;m<p;m++)(G[m].fn!==l||Z&&!G[m].once||b&&G[m].context!==b)&&K.push(G[m]);K.length?this._events[X]=1===K.length?K[0]:K:y(this,X)}return this},G.prototype.removeAllListeners=function(d){var l;return d?(l=c?c+d:d,this._events[l]&&y(this,l)):(this._events=new b,this._eventsCount=0),this},G.prototype.off=G.prototype.removeListener,G.prototype.addListener=G.prototype.on,G.prefixed=c,G.EventEmitter=G,d.exports=G}));return function(){if("browser"!=("undefined"!=typeof window&&void 0!==window.document?"browser":"nodejs"))return null;function d(){return new R}function c(){var d,l,c=new Promise((function(){d=arguments[0],l=arguments[1]}));return c.resolve=d,c.reject=l,c}function b(){for(var d=arguments.length>0&&void 0!==arguments[0]?arguments[0]:10,l=[],c="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""),b=c.length,Z=0;Z<d;Z++)l[Z]=c[0|Math.random()*b];return l.join("")}var X=g("");function y(){var l=d();function Z(d){try{var l=new Blob([d]),c=window.URL||window.webkitURL;return new Worker(c.createObjectURL(l))}catch(d){i(d)}}var y=Z(X);if(!y)return i("invalid worker"),null;function G(){y?(y.terminate(),y=void 0):i("worker has been terminated")}function m(){var d={mode:"init",type:"object",input:Array.prototype.slice.call(arguments)};y.postMessage(d)}function K(){var d=c(),Z=b(),X={mode:"call",id:Z,fun:"PCA",input:Array.prototype.slice.call(arguments)};return y.postMessage(X),l.once(Z,(function(l){"success"===l.state?d.resolve(l.msg):d.reject(l.msg)})),d}function p(){var d=c(),Z=b(),X={mode:"call",id:Z,fun:"cluster",input:Array.prototype.slice.call(arguments)};return y.postMessage(X),l.once(Z,(function(l){"success"===l.state?d.resolve(l.msg):d.reject(l.msg)})),d}function t(d){var c=d,b=c.mode;"emit"!==b&&"return"!==b||("emit"===b&&l.emit(c.evName,c.msg),"return"===b&&l.emit(c.id,c))}function i(d){l.emit("error",d)}return y.onmessage=function(d){t(d.data)},y.onerror=i,m(Array.prototype.slice.call(arguments)),l.PCA=K,l.cluster=p,l.terminate=G,l}var G,p,t={PCA:(p=Z(K.mark((function d(){var c,b,Z,X=arguments;return K.wrap((function(d){for(;;)switch(d.prev=d.next){case 0:return c=Array.prototype.slice.call(X),b=y(),d.next=4,b.PCA.apply(b,l(c)).finally((function(){b.terminate()}));case 4:return Z=d.sent,d.abrupt("return",Z);case 6:case"end":return d.stop()}}),d)}))),function(){return p.apply(this,arguments)}),cluster:(G=Z(K.mark((function d(){var c,b,Z,X=arguments;return K.wrap((function(d){for(;;)switch(d.prev=d.next){case 0:return c=Array.prototype.slice.call(X),b=y(),d.next=4,b.cluster.apply(b,l(c)).finally((function(){b.terminate()}));case 4:return Z=d.sent,d.abrupt("return",Z);case 6:case"end":return d.stop()}}),d)}))),function(){return G.apply(this,arguments)})};for(var i in m=d(),t){var o=t[i];m[i]=o}}(),m}()}));return"undefined"!=typeof window&&void 0!==window.document?y:X}));
