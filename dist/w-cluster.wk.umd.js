!function(d,l){"object"==typeof exports&&"undefined"!=typeof module?module.exports=l(require("worker_threads")):"function"==typeof define&&define.amd?define(["worker_threads"],l):(d="undefined"!=typeof globalThis?globalThis:d||self)["w-cluster"]=l(d.worker_threads)}(this,(function(d){"use strict";function l(d){return d&&"object"==typeof d&&"default"in d?d:{default:d}}var c=l(d);function b(d){return(b="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(d){return typeof d}:function(d){return d&&"function"==typeof Symbol&&d.constructor===Symbol&&d!==Symbol.prototype?"symbol":typeof d})(d)}var Z="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function X(d){var l={exports:{}};return d(l,l.exports),l.exports}var y=X((function(d,l){d.exports=function(d){function l(d,l){(null==l||l>d.length)&&(l=d.length);for(var c=0,b=new Array(l);c<l;c++)b[c]=d[c];return b}function c(d){return function(d){if(Array.isArray(d))return l(d)}(d)||function(d){if("undefined"!=typeof Symbol&&null!=d[Symbol.iterator]||null!=d["@@iterator"])return Array.from(d)}(d)||function(d,c){if(d){if("string"==typeof d)return l(d,c);var b=Object.prototype.toString.call(d).slice(8,-1);return"Object"===b&&d.constructor&&(b=d.constructor.name),"Map"===b||"Set"===b?Array.from(d):"Arguments"===b||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(b)?l(d,c):void 0}}(d)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Z(d,l,c,b,Z,X,y){try{var G=d[X](y),m=G.value}catch(d){return void c(d)}G.done?l(m):Promise.resolve(m).then(b,Z)}function X(d){return function(){var l=this,c=arguments;return new Promise((function(b,X){var y=d.apply(l,c);function G(d){Z(y,b,X,G,m,"next",d)}function m(d){Z(y,b,X,G,m,"throw",d)}G(void 0)}))}}function y(d){return(y="function"==typeof Symbol&&"symbol"==b(Symbol.iterator)?function(d){return b(d)}:function(d){return d&&"function"==typeof Symbol&&d.constructor===Symbol&&d!==Symbol.prototype?"symbol":b(d)})(d)}function G(d){var l={exports:{}};return d(l,l.exports),l.exports}var m,K=G((function(d){var l=function(d){var l,c=Object.prototype,b=c.hasOwnProperty,Z="function"==typeof Symbol?Symbol:{},X=Z.iterator||"@@iterator",G=Z.asyncIterator||"@@asyncIterator",m=Z.toStringTag||"@@toStringTag";function K(d,l,c){return Object.defineProperty(d,l,{value:c,enumerable:!0,configurable:!0,writable:!0}),d[l]}try{K({},"")}catch(d){K=function(d,l,c){return d[l]=c}}function t(d,l,c,b){var Z=l&&l.prototype instanceof u?l:u,X=Object.create(Z.prototype),y=new R(b||[]);return X._invoke=function(d,l,c){var b=o;return function(Z,X){if(b===h)throw new Error("Generator is already running");if(b===W){if("throw"===Z)throw X;return T()}for(c.method=Z,c.arg=X;;){var y=c.delegate;if(y){var G=S(y,c);if(G){if(G===i)continue;return G}}if("next"===c.method)c.sent=c._sent=c.arg;else if("throw"===c.method){if(b===o)throw b=W,c.arg;c.dispatchException(c.arg)}else"return"===c.method&&c.abrupt("return",c.arg);b=h;var m=p(d,l,c);if("normal"===m.type){if(b=c.done?W:I,m.arg===i)continue;return{value:m.arg,done:c.done}}"throw"===m.type&&(b=W,c.method="throw",c.arg=m.arg)}}}(d,c,y),X}function p(d,l,c){try{return{type:"normal",arg:d.call(l,c)}}catch(d){return{type:"throw",arg:d}}}d.wrap=t;var o="suspendedStart",I="suspendedYield",h="executing",W="completed",i={};function u(){}function V(){}function s(){}var H={};H[X]=function(){return this};var n=Object.getPrototypeOf,C=n&&n(n(z([])));C&&C!==c&&b.call(C,X)&&(H=C);var L=s.prototype=u.prototype=Object.create(H);function a(d){["next","throw","return"].forEach((function(l){K(d,l,(function(d){return this._invoke(l,d)}))}))}function x(d,l){function c(Z,X,G,m){var K=p(d[Z],d,X);if("throw"!==K.type){var t=K.arg,o=t.value;return o&&"object"===y(o)&&b.call(o,"__await")?l.resolve(o.__await).then((function(d){c("next",d,G,m)}),(function(d){c("throw",d,G,m)})):l.resolve(o).then((function(d){t.value=d,G(t)}),(function(d){return c("throw",d,G,m)}))}m(K.arg)}var Z;this._invoke=function(d,b){function X(){return new l((function(l,Z){c(d,b,l,Z)}))}return Z=Z?Z.then(X,X):X()}}function S(d,c){var b=d.iterator[c.method];if(b===l){if(c.delegate=null,"throw"===c.method){if(d.iterator.return&&(c.method="return",c.arg=l,S(d,c),"throw"===c.method))return i;c.method="throw",c.arg=new TypeError("The iterator does not provide a 'throw' method")}return i}var Z=p(b,d.iterator,c.arg);if("throw"===Z.type)return c.method="throw",c.arg=Z.arg,c.delegate=null,i;var X=Z.arg;return X?X.done?(c[d.resultName]=X.value,c.next=d.nextLoc,"return"!==c.method&&(c.method="next",c.arg=l),c.delegate=null,i):X:(c.method="throw",c.arg=new TypeError("iterator result is not an object"),c.delegate=null,i)}function Y(d){var l={tryLoc:d[0]};1 in d&&(l.catchLoc=d[1]),2 in d&&(l.finallyLoc=d[2],l.afterLoc=d[3]),this.tryEntries.push(l)}function g(d){var l=d.completion||{};l.type="normal",delete l.arg,d.completion=l}function R(d){this.tryEntries=[{tryLoc:"root"}],d.forEach(Y,this),this.reset(!0)}function z(d){if(d){var c=d[X];if(c)return c.call(d);if("function"==typeof d.next)return d;if(!isNaN(d.length)){var Z=-1,y=function c(){for(;++Z<d.length;)if(b.call(d,Z))return c.value=d[Z],c.done=!1,c;return c.value=l,c.done=!0,c};return y.next=y}}return{next:T}}function T(){return{value:l,done:!0}}return V.prototype=L.constructor=s,s.constructor=V,V.displayName=K(s,m,"GeneratorFunction"),d.isGeneratorFunction=function(d){var l="function"==typeof d&&d.constructor;return!!l&&(l===V||"GeneratorFunction"===(l.displayName||l.name))},d.mark=function(d){return Object.setPrototypeOf?Object.setPrototypeOf(d,s):(d.__proto__=s,K(d,m,"GeneratorFunction")),d.prototype=Object.create(L),d},d.awrap=function(d){return{__await:d}},a(x.prototype),x.prototype[G]=function(){return this},d.AsyncIterator=x,d.async=function(l,c,b,Z,X){void 0===X&&(X=Promise);var y=new x(t(l,c,b,Z),X);return d.isGeneratorFunction(c)?y:y.next().then((function(d){return d.done?d.value:y.next()}))},a(L),K(L,m,"Generator"),L[X]=function(){return this},L.toString=function(){return"[object Generator]"},d.keys=function(d){var l=[];for(var c in d)l.push(c);return l.reverse(),function c(){for(;l.length;){var b=l.pop();if(b in d)return c.value=b,c.done=!1,c}return c.done=!0,c}},d.values=z,R.prototype={constructor:R,reset:function(d){if(this.prev=0,this.next=0,this.sent=this._sent=l,this.done=!1,this.delegate=null,this.method="next",this.arg=l,this.tryEntries.forEach(g),!d)for(var c in this)"t"===c.charAt(0)&&b.call(this,c)&&!isNaN(+c.slice(1))&&(this[c]=l)},stop:function(){this.done=!0;var d=this.tryEntries[0].completion;if("throw"===d.type)throw d.arg;return this.rval},dispatchException:function(d){if(this.done)throw d;var c=this;function Z(b,Z){return G.type="throw",G.arg=d,c.next=b,Z&&(c.method="next",c.arg=l),!!Z}for(var X=this.tryEntries.length-1;X>=0;--X){var y=this.tryEntries[X],G=y.completion;if("root"===y.tryLoc)return Z("end");if(y.tryLoc<=this.prev){var m=b.call(y,"catchLoc"),K=b.call(y,"finallyLoc");if(m&&K){if(this.prev<y.catchLoc)return Z(y.catchLoc,!0);if(this.prev<y.finallyLoc)return Z(y.finallyLoc)}else if(m){if(this.prev<y.catchLoc)return Z(y.catchLoc,!0)}else{if(!K)throw new Error("try statement without catch or finally");if(this.prev<y.finallyLoc)return Z(y.finallyLoc)}}}},abrupt:function(d,l){for(var c=this.tryEntries.length-1;c>=0;--c){var Z=this.tryEntries[c];if(Z.tryLoc<=this.prev&&b.call(Z,"finallyLoc")&&this.prev<Z.finallyLoc){var X=Z;break}}X&&("break"===d||"continue"===d)&&X.tryLoc<=l&&l<=X.finallyLoc&&(X=null);var y=X?X.completion:{};return y.type=d,y.arg=l,X?(this.method="next",this.next=X.finallyLoc,i):this.complete(y)},complete:function(d,l){if("throw"===d.type)throw d.arg;return"break"===d.type||"continue"===d.type?this.next=d.arg:"return"===d.type?(this.rval=this.arg=d.arg,this.method="return",this.next="end"):"normal"===d.type&&l&&(this.next=l),i},finish:function(d){for(var l=this.tryEntries.length-1;l>=0;--l){var c=this.tryEntries[l];if(c.finallyLoc===d)return this.complete(c.completion,c.afterLoc),g(c),i}},catch:function(d){for(var l=this.tryEntries.length-1;l>=0;--l){var c=this.tryEntries[l];if(c.tryLoc===d){var b=c.completion;if("throw"===b.type){var Z=b.arg;g(c)}return Z}}throw new Error("illegal catch attempt")},delegateYield:function(d,c,b){return this.delegate={iterator:z(d),resultName:c,nextLoc:b},"next"===this.method&&(this.arg=l),i}},d}(d.exports);try{regeneratorRuntime=l}catch(d){Function("r","regeneratorRuntime = r")(l)}})),t=G((function(d){var l=Object.prototype.hasOwnProperty,c="~";function b(){}function Z(d,l,c){this.fn=d,this.context=l,this.once=c||!1}function X(d,l,b,X,y){if("function"!=typeof b)throw new TypeError("The listener must be a function");var G=new Z(b,X||d,y),m=c?c+l:l;return d._events[m]?d._events[m].fn?d._events[m]=[d._events[m],G]:d._events[m].push(G):(d._events[m]=G,d._eventsCount++),d}function y(d,l){0==--d._eventsCount?d._events=new b:delete d._events[l]}function G(){this._events=new b,this._eventsCount=0}Object.create&&(b.prototype=Object.create(null),(new b).__proto__||(c=!1)),G.prototype.eventNames=function(){var d,b,Z=[];if(0===this._eventsCount)return Z;for(b in d=this._events)l.call(d,b)&&Z.push(c?b.slice(1):b);return Object.getOwnPropertySymbols?Z.concat(Object.getOwnPropertySymbols(d)):Z},G.prototype.listeners=function(d){var l=c?c+d:d,b=this._events[l];if(!b)return[];if(b.fn)return[b.fn];for(var Z=0,X=b.length,y=new Array(X);Z<X;Z++)y[Z]=b[Z].fn;return y},G.prototype.listenerCount=function(d){var l=c?c+d:d,b=this._events[l];return b?b.fn?1:b.length:0},G.prototype.emit=function(d,l,b,Z,X,y){var G=c?c+d:d;if(!this._events[G])return!1;var m,K,t=this._events[G],p=arguments.length;if(t.fn){switch(t.once&&this.removeListener(d,t.fn,void 0,!0),p){case 1:return t.fn.call(t.context),!0;case 2:return t.fn.call(t.context,l),!0;case 3:return t.fn.call(t.context,l,b),!0;case 4:return t.fn.call(t.context,l,b,Z),!0;case 5:return t.fn.call(t.context,l,b,Z,X),!0;case 6:return t.fn.call(t.context,l,b,Z,X,y),!0}for(K=1,m=new Array(p-1);K<p;K++)m[K-1]=arguments[K];t.fn.apply(t.context,m)}else{var o,I=t.length;for(K=0;K<I;K++)switch(t[K].once&&this.removeListener(d,t[K].fn,void 0,!0),p){case 1:t[K].fn.call(t[K].context);break;case 2:t[K].fn.call(t[K].context,l);break;case 3:t[K].fn.call(t[K].context,l,b);break;case 4:t[K].fn.call(t[K].context,l,b,Z);break;default:if(!m)for(o=1,m=new Array(p-1);o<p;o++)m[o-1]=arguments[o];t[K].fn.apply(t[K].context,m)}}return!0},G.prototype.on=function(d,l,c){return X(this,d,l,c,!1)},G.prototype.once=function(d,l,c){return X(this,d,l,c,!0)},G.prototype.removeListener=function(d,l,b,Z){var X=c?c+d:d;if(!this._events[X])return this;if(!l)return y(this,X),this;var G=this._events[X];if(G.fn)G.fn!==l||Z&&!G.once||b&&G.context!==b||y(this,X);else{for(var m=0,K=[],t=G.length;m<t;m++)(G[m].fn!==l||Z&&!G[m].once||b&&G[m].context!==b)&&K.push(G[m]);K.length?this._events[X]=1===K.length?K[0]:K:y(this,X)}return this},G.prototype.removeAllListeners=function(d){var l;return d?(l=c?c+d:d,this._events[l]&&y(this,l)):(this._events=new b,this._eventsCount=0),this},G.prototype.off=G.prototype.removeListener,G.prototype.addListener=G.prototype.on,G.prefixed=c,G.EventEmitter=G,d.exports=G}));return function(){if("nodejs"!=("undefined"!=typeof window&&void 0!==window.document?"browser":"nodejs"))return null;function l(){return new t}function b(){var d,l,c=new Promise((function(){d=arguments[0],l=arguments[1]}));return c.resolve=d,c.reject=l,c}function Z(){for(var d=arguments.length>0&&void 0!==arguments[0]?arguments[0]:10,l=[],c="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""),b=c.length,Z=0;Z<d;Z++)l[Z]=c[0|Math.random()*b];return l.join("")}var y,G=(y="",Buffer.from(y,"base64").toString("utf8"));function p(){var c=l();function X(l){try{return new d.Worker(l,{eval:!0})}catch(d){I(d)}}var y=X(G);if(!y)return I("invalid worker"),null;function m(){y?(y.terminate(),y=void 0):I("worker has been terminated")}function K(){var d={mode:"init",type:"object",input:Array.prototype.slice.call(arguments)};y.postMessage(d)}function t(){var d=b(),l=Z(),X={mode:"call",id:l,fun:"PCA",input:Array.prototype.slice.call(arguments)};return y.postMessage(X),c.once(l,(function(l){"success"===l.state?d.resolve(l.msg):d.reject(l.msg)})),d}function p(){var d=b(),l=Z(),X={mode:"call",id:l,fun:"cluster",input:Array.prototype.slice.call(arguments)};return y.postMessage(X),c.once(l,(function(l){"success"===l.state?d.resolve(l.msg):d.reject(l.msg)})),d}function o(d){var l=d,b=l.mode;"emit"!==b&&"return"!==b||("emit"===b&&c.emit(l.evName,l.msg),"return"===b&&c.emit(l.id,l))}function I(d){c.emit("error",d)}return y.on("message",o),y.on("error",I),K(Array.prototype.slice.call(arguments)),c.PCA=t,c.cluster=p,c.terminate=m,c}var o,I,h={PCA:(I=X(K.mark((function d(){var l,b,Z,X=arguments;return K.wrap((function(d){for(;;)switch(d.prev=d.next){case 0:return l=Array.prototype.slice.call(X),b=p(),d.next=4,b.PCA.apply(b,c(l)).finally((function(){b.terminate()}));case 4:return Z=d.sent,d.abrupt("return",Z);case 6:case"end":return d.stop()}}),d)}))),function(){return I.apply(this,arguments)}),cluster:(o=X(K.mark((function d(){var l,b,Z,X=arguments;return K.wrap((function(d){for(;;)switch(d.prev=d.next){case 0:return l=Array.prototype.slice.call(X),b=p(),d.next=4,b.cluster.apply(b,c(l)).finally((function(){b.terminate()}));case 4:return Z=d.sent,d.abrupt("return",Z);case 6:case"end":return d.stop()}}),d)}))),function(){return o.apply(this,arguments)})};for(var W in m=l(),h){var i=h[W];m[W]=i}}(),m}(c.default)})),G=X((function(d,l){d.exports=function(){function d(d,l){(null==l||l>d.length)&&(l=d.length);for(var c=0,b=new Array(l);c<l;c++)b[c]=d[c];return b}function l(l){return function(l){if(Array.isArray(l))return d(l)}(l)||function(d){if("undefined"!=typeof Symbol&&null!=d[Symbol.iterator]||null!=d["@@iterator"])return Array.from(d)}(l)||function(l,c){if(l){if("string"==typeof l)return d(l,c);var b=Object.prototype.toString.call(l).slice(8,-1);return"Object"===b&&l.constructor&&(b=l.constructor.name),"Map"===b||"Set"===b?Array.from(l):"Arguments"===b||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(b)?d(l,c):void 0}}(l)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function c(d,l,c,b,Z,X,y){try{var G=d[X](y),m=G.value}catch(d){return void c(d)}G.done?l(m):Promise.resolve(m).then(b,Z)}function X(d){return function(){var l=this,b=arguments;return new Promise((function(Z,X){var y=d.apply(l,b);function G(d){c(y,Z,X,G,m,"next",d)}function m(d){c(y,Z,X,G,m,"throw",d)}G(void 0)}))}}function y(d){return(y="function"==typeof Symbol&&"symbol"==b(Symbol.iterator)?function(d){return b(d)}:function(d){return d&&"function"==typeof Symbol&&d.constructor===Symbol&&d!==Symbol.prototype?"symbol":b(d)})(d)}var G="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==Z?Z:"undefined"!=typeof self?self:{};function m(d){var l={exports:{}};return d(l,l.exports),l.exports}var K,t=m((function(d){var l=function(d){var l,c=Object.prototype,b=c.hasOwnProperty,Z="function"==typeof Symbol?Symbol:{},X=Z.iterator||"@@iterator",G=Z.asyncIterator||"@@asyncIterator",m=Z.toStringTag||"@@toStringTag";function K(d,l,c){return Object.defineProperty(d,l,{value:c,enumerable:!0,configurable:!0,writable:!0}),d[l]}try{K({},"")}catch(d){K=function(d,l,c){return d[l]=c}}function t(d,l,c,b){var Z=l&&l.prototype instanceof u?l:u,X=Object.create(Z.prototype),y=new R(b||[]);return X._invoke=function(d,l,c){var b=o;return function(Z,X){if(b===h)throw new Error("Generator is already running");if(b===W){if("throw"===Z)throw X;return T()}for(c.method=Z,c.arg=X;;){var y=c.delegate;if(y){var G=S(y,c);if(G){if(G===i)continue;return G}}if("next"===c.method)c.sent=c._sent=c.arg;else if("throw"===c.method){if(b===o)throw b=W,c.arg;c.dispatchException(c.arg)}else"return"===c.method&&c.abrupt("return",c.arg);b=h;var m=p(d,l,c);if("normal"===m.type){if(b=c.done?W:I,m.arg===i)continue;return{value:m.arg,done:c.done}}"throw"===m.type&&(b=W,c.method="throw",c.arg=m.arg)}}}(d,c,y),X}function p(d,l,c){try{return{type:"normal",arg:d.call(l,c)}}catch(d){return{type:"throw",arg:d}}}d.wrap=t;var o="suspendedStart",I="suspendedYield",h="executing",W="completed",i={};function u(){}function V(){}function s(){}var H={};H[X]=function(){return this};var n=Object.getPrototypeOf,C=n&&n(n(z([])));C&&C!==c&&b.call(C,X)&&(H=C);var L=s.prototype=u.prototype=Object.create(H);function a(d){["next","throw","return"].forEach((function(l){K(d,l,(function(d){return this._invoke(l,d)}))}))}function x(d,l){function c(Z,X,G,m){var K=p(d[Z],d,X);if("throw"!==K.type){var t=K.arg,o=t.value;return o&&"object"===y(o)&&b.call(o,"__await")?l.resolve(o.__await).then((function(d){c("next",d,G,m)}),(function(d){c("throw",d,G,m)})):l.resolve(o).then((function(d){t.value=d,G(t)}),(function(d){return c("throw",d,G,m)}))}m(K.arg)}var Z;this._invoke=function(d,b){function X(){return new l((function(l,Z){c(d,b,l,Z)}))}return Z=Z?Z.then(X,X):X()}}function S(d,c){var b=d.iterator[c.method];if(b===l){if(c.delegate=null,"throw"===c.method){if(d.iterator.return&&(c.method="return",c.arg=l,S(d,c),"throw"===c.method))return i;c.method="throw",c.arg=new TypeError("The iterator does not provide a 'throw' method")}return i}var Z=p(b,d.iterator,c.arg);if("throw"===Z.type)return c.method="throw",c.arg=Z.arg,c.delegate=null,i;var X=Z.arg;return X?X.done?(c[d.resultName]=X.value,c.next=d.nextLoc,"return"!==c.method&&(c.method="next",c.arg=l),c.delegate=null,i):X:(c.method="throw",c.arg=new TypeError("iterator result is not an object"),c.delegate=null,i)}function Y(d){var l={tryLoc:d[0]};1 in d&&(l.catchLoc=d[1]),2 in d&&(l.finallyLoc=d[2],l.afterLoc=d[3]),this.tryEntries.push(l)}function g(d){var l=d.completion||{};l.type="normal",delete l.arg,d.completion=l}function R(d){this.tryEntries=[{tryLoc:"root"}],d.forEach(Y,this),this.reset(!0)}function z(d){if(d){var c=d[X];if(c)return c.call(d);if("function"==typeof d.next)return d;if(!isNaN(d.length)){var Z=-1,y=function c(){for(;++Z<d.length;)if(b.call(d,Z))return c.value=d[Z],c.done=!1,c;return c.value=l,c.done=!0,c};return y.next=y}}return{next:T}}function T(){return{value:l,done:!0}}return V.prototype=L.constructor=s,s.constructor=V,V.displayName=K(s,m,"GeneratorFunction"),d.isGeneratorFunction=function(d){var l="function"==typeof d&&d.constructor;return!!l&&(l===V||"GeneratorFunction"===(l.displayName||l.name))},d.mark=function(d){return Object.setPrototypeOf?Object.setPrototypeOf(d,s):(d.__proto__=s,K(d,m,"GeneratorFunction")),d.prototype=Object.create(L),d},d.awrap=function(d){return{__await:d}},a(x.prototype),x.prototype[G]=function(){return this},d.AsyncIterator=x,d.async=function(l,c,b,Z,X){void 0===X&&(X=Promise);var y=new x(t(l,c,b,Z),X);return d.isGeneratorFunction(c)?y:y.next().then((function(d){return d.done?d.value:y.next()}))},a(L),K(L,m,"Generator"),L[X]=function(){return this},L.toString=function(){return"[object Generator]"},d.keys=function(d){var l=[];for(var c in d)l.push(c);return l.reverse(),function c(){for(;l.length;){var b=l.pop();if(b in d)return c.value=b,c.done=!1,c}return c.done=!0,c}},d.values=z,R.prototype={constructor:R,reset:function(d){if(this.prev=0,this.next=0,this.sent=this._sent=l,this.done=!1,this.delegate=null,this.method="next",this.arg=l,this.tryEntries.forEach(g),!d)for(var c in this)"t"===c.charAt(0)&&b.call(this,c)&&!isNaN(+c.slice(1))&&(this[c]=l)},stop:function(){this.done=!0;var d=this.tryEntries[0].completion;if("throw"===d.type)throw d.arg;return this.rval},dispatchException:function(d){if(this.done)throw d;var c=this;function Z(b,Z){return G.type="throw",G.arg=d,c.next=b,Z&&(c.method="next",c.arg=l),!!Z}for(var X=this.tryEntries.length-1;X>=0;--X){var y=this.tryEntries[X],G=y.completion;if("root"===y.tryLoc)return Z("end");if(y.tryLoc<=this.prev){var m=b.call(y,"catchLoc"),K=b.call(y,"finallyLoc");if(m&&K){if(this.prev<y.catchLoc)return Z(y.catchLoc,!0);if(this.prev<y.finallyLoc)return Z(y.finallyLoc)}else if(m){if(this.prev<y.catchLoc)return Z(y.catchLoc,!0)}else{if(!K)throw new Error("try statement without catch or finally");if(this.prev<y.finallyLoc)return Z(y.finallyLoc)}}}},abrupt:function(d,l){for(var c=this.tryEntries.length-1;c>=0;--c){var Z=this.tryEntries[c];if(Z.tryLoc<=this.prev&&b.call(Z,"finallyLoc")&&this.prev<Z.finallyLoc){var X=Z;break}}X&&("break"===d||"continue"===d)&&X.tryLoc<=l&&l<=X.finallyLoc&&(X=null);var y=X?X.completion:{};return y.type=d,y.arg=l,X?(this.method="next",this.next=X.finallyLoc,i):this.complete(y)},complete:function(d,l){if("throw"===d.type)throw d.arg;return"break"===d.type||"continue"===d.type?this.next=d.arg:"return"===d.type?(this.rval=this.arg=d.arg,this.method="return",this.next="end"):"normal"===d.type&&l&&(this.next=l),i},finish:function(d){for(var l=this.tryEntries.length-1;l>=0;--l){var c=this.tryEntries[l];if(c.finallyLoc===d)return this.complete(c.completion,c.afterLoc),g(c),i}},catch:function(d){for(var l=this.tryEntries.length-1;l>=0;--l){var c=this.tryEntries[l];if(c.tryLoc===d){var b=c.completion;if("throw"===b.type){var Z=b.arg;g(c)}return Z}}throw new Error("illegal catch attempt")},delegateYield:function(d,c,b){return this.delegate={iterator:z(d),resultName:c,nextLoc:b},"next"===this.method&&(this.arg=l),i}},d}(d.exports);try{regeneratorRuntime=l}catch(d){Function("r","regeneratorRuntime = r")(l)}})),p=m((function(d,l){!function(l,c){d.exports=function(l){var c,b=(l=l||{}).Base64,Z="2.6.4",X="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",y=function(d){for(var l={},c=0,b=d.length;c<b;c++)l[d.charAt(c)]=c;return l}(X),G=String.fromCharCode,m=function(d){if(d.length<2)return(l=d.charCodeAt(0))<128?d:l<2048?G(192|l>>>6)+G(128|63&l):G(224|l>>>12&15)+G(128|l>>>6&63)+G(128|63&l);var l=65536+1024*(d.charCodeAt(0)-55296)+(d.charCodeAt(1)-56320);return G(240|l>>>18&7)+G(128|l>>>12&63)+G(128|l>>>6&63)+G(128|63&l)},K=/[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g,t=function(d){return d.replace(K,m)},p=function(d){var l=[0,2,1][d.length%3],c=d.charCodeAt(0)<<16|(d.length>1?d.charCodeAt(1):0)<<8|(d.length>2?d.charCodeAt(2):0);return[X.charAt(c>>>18),X.charAt(c>>>12&63),l>=2?"=":X.charAt(c>>>6&63),l>=1?"=":X.charAt(63&c)].join("")},o=l.btoa&&"function"==typeof l.btoa?function(d){return l.btoa(d)}:function(d){if(d.match(/[^\x00-\xFF]/))throw new RangeError("The string contains invalid characters.");return d.replace(/[\s\S]{1,3}/g,p)},I=function(d){return o(t(String(d)))},h=function(d){return d.replace(/[+\/]/g,(function(d){return"+"==d?"-":"_"})).replace(/=/g,"")},W=function(d,l){return l?h(I(d)):I(d)},i=function(d){return W(d,!0)};l.Uint8Array&&(c=function(d,l){for(var c="",b=0,Z=d.length;b<Z;b+=3){var y=d[b],G=d[b+1],m=d[b+2],K=y<<16|G<<8|m;c+=X.charAt(K>>>18)+X.charAt(K>>>12&63)+(void 0!==G?X.charAt(K>>>6&63):"=")+(void 0!==m?X.charAt(63&K):"=")}return l?h(c):c});var u,V=/[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g,s=function(d){switch(d.length){case 4:var l=((7&d.charCodeAt(0))<<18|(63&d.charCodeAt(1))<<12|(63&d.charCodeAt(2))<<6|63&d.charCodeAt(3))-65536;return G(55296+(l>>>10))+G(56320+(1023&l));case 3:return G((15&d.charCodeAt(0))<<12|(63&d.charCodeAt(1))<<6|63&d.charCodeAt(2));default:return G((31&d.charCodeAt(0))<<6|63&d.charCodeAt(1))}},H=function(d){return d.replace(V,s)},n=function(d){var l=d.length,c=l%4,b=(l>0?y[d.charAt(0)]<<18:0)|(l>1?y[d.charAt(1)]<<12:0)|(l>2?y[d.charAt(2)]<<6:0)|(l>3?y[d.charAt(3)]:0),Z=[G(b>>>16),G(b>>>8&255),G(255&b)];return Z.length-=[0,0,2,1][c],Z.join("")},C=l.atob&&"function"==typeof l.atob?function(d){return l.atob(d)}:function(d){return d.replace(/\S{1,4}/g,n)},L=function(d){return C(String(d).replace(/[^A-Za-z0-9\+\/]/g,""))},a=function(d){return H(C(d))},x=function(d){return String(d).replace(/[-_]/g,(function(d){return"-"==d?"+":"/"})).replace(/[^A-Za-z0-9\+\/]/g,"")},S=function(d){return a(x(d))};l.Uint8Array&&(u=function(d){return Uint8Array.from(L(x(d)),(function(d){return d.charCodeAt(0)}))});var Y=function(){var d=l.Base64;return l.Base64=b,d};if(l.Base64={VERSION:Z,atob:L,btoa:o,fromBase64:S,toBase64:W,utob:t,encode:W,encodeURI:i,btou:H,decode:S,noConflict:Y,fromUint8Array:c,toUint8Array:u},"function"==typeof Object.defineProperty){var g=function(d){return{value:d,enumerable:!1,writable:!0,configurable:!0}};l.Base64.extendString=function(){Object.defineProperty(String.prototype,"fromBase64",g((function(){return S(this)}))),Object.defineProperty(String.prototype,"toBase64",g((function(d){return W(this,d)}))),Object.defineProperty(String.prototype,"toBase64URI",g((function(){return W(this,!0)})))}}return l.Meteor&&(Base64=l.Base64),d.exports&&(d.exports.Base64=l.Base64),{Base64:l.Base64}}(l)}("undefined"!=typeof self?self:"undefined"!=typeof window?window:G)})),o=m((function(d){var l=Object.prototype.hasOwnProperty,c="~";function b(){}function Z(d,l,c){this.fn=d,this.context=l,this.once=c||!1}function X(d,l,b,X,y){if("function"!=typeof b)throw new TypeError("The listener must be a function");var G=new Z(b,X||d,y),m=c?c+l:l;return d._events[m]?d._events[m].fn?d._events[m]=[d._events[m],G]:d._events[m].push(G):(d._events[m]=G,d._eventsCount++),d}function y(d,l){0==--d._eventsCount?d._events=new b:delete d._events[l]}function G(){this._events=new b,this._eventsCount=0}Object.create&&(b.prototype=Object.create(null),(new b).__proto__||(c=!1)),G.prototype.eventNames=function(){var d,b,Z=[];if(0===this._eventsCount)return Z;for(b in d=this._events)l.call(d,b)&&Z.push(c?b.slice(1):b);return Object.getOwnPropertySymbols?Z.concat(Object.getOwnPropertySymbols(d)):Z},G.prototype.listeners=function(d){var l=c?c+d:d,b=this._events[l];if(!b)return[];if(b.fn)return[b.fn];for(var Z=0,X=b.length,y=new Array(X);Z<X;Z++)y[Z]=b[Z].fn;return y},G.prototype.listenerCount=function(d){var l=c?c+d:d,b=this._events[l];return b?b.fn?1:b.length:0},G.prototype.emit=function(d,l,b,Z,X,y){var G=c?c+d:d;if(!this._events[G])return!1;var m,K,t=this._events[G],p=arguments.length;if(t.fn){switch(t.once&&this.removeListener(d,t.fn,void 0,!0),p){case 1:return t.fn.call(t.context),!0;case 2:return t.fn.call(t.context,l),!0;case 3:return t.fn.call(t.context,l,b),!0;case 4:return t.fn.call(t.context,l,b,Z),!0;case 5:return t.fn.call(t.context,l,b,Z,X),!0;case 6:return t.fn.call(t.context,l,b,Z,X,y),!0}for(K=1,m=new Array(p-1);K<p;K++)m[K-1]=arguments[K];t.fn.apply(t.context,m)}else{var o,I=t.length;for(K=0;K<I;K++)switch(t[K].once&&this.removeListener(d,t[K].fn,void 0,!0),p){case 1:t[K].fn.call(t[K].context);break;case 2:t[K].fn.call(t[K].context,l);break;case 3:t[K].fn.call(t[K].context,l,b);break;case 4:t[K].fn.call(t[K].context,l,b,Z);break;default:if(!m)for(o=1,m=new Array(p-1);o<p;o++)m[o-1]=arguments[o];t[K].fn.apply(t[K].context,m)}}return!0},G.prototype.on=function(d,l,c){return X(this,d,l,c,!1)},G.prototype.once=function(d,l,c){return X(this,d,l,c,!0)},G.prototype.removeListener=function(d,l,b,Z){var X=c?c+d:d;if(!this._events[X])return this;if(!l)return y(this,X),this;var G=this._events[X];if(G.fn)G.fn!==l||Z&&!G.once||b&&G.context!==b||y(this,X);else{for(var m=0,K=[],t=G.length;m<t;m++)(G[m].fn!==l||Z&&!G[m].once||b&&G[m].context!==b)&&K.push(G[m]);K.length?this._events[X]=1===K.length?K[0]:K:y(this,X)}return this},G.prototype.removeAllListeners=function(d){var l;return d?(l=c?c+d:d,this._events[l]&&y(this,l)):(this._events=new b,this._eventsCount=0),this},G.prototype.off=G.prototype.removeListener,G.prototype.addListener=G.prototype.on,G.prefixed=c,G.EventEmitter=G,d.exports=G}));return function(){if("browser"!=("undefined"!=typeof window&&void 0!==window.document?"browser":"nodejs"))return null;function d(){return new o}function c(){var d,l,c=new Promise((function(){d=arguments[0],l=arguments[1]}));return c.resolve=d,c.reject=l,c}function b(){for(var d=arguments.length>0&&void 0!==arguments[0]?arguments[0]:10,l=[],c="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""),b=c.length,Z=0;Z<d;Z++)l[Z]=c[0|Math.random()*b];return l.join("")}var Z,y=(Z="",p.Base64.decode(Z));function G(){var l=d();function Z(d){try{var l=new Blob([d]),c=window.URL||window.webkitURL;return new Worker(c.createObjectURL(l))}catch(d){o(d)}}var X=Z(y);if(!X)return o("invalid worker"),null;function G(){X?(X.terminate(),X=void 0):o("worker has been terminated")}function m(){var d={mode:"init",type:"object",input:Array.prototype.slice.call(arguments)};X.postMessage(d)}function K(){var d=c(),Z=b(),y={mode:"call",id:Z,fun:"PCA",input:Array.prototype.slice.call(arguments)};return X.postMessage(y),l.once(Z,(function(l){"success"===l.state?d.resolve(l.msg):d.reject(l.msg)})),d}function t(){var d=c(),Z=b(),y={mode:"call",id:Z,fun:"cluster",input:Array.prototype.slice.call(arguments)};return X.postMessage(y),l.once(Z,(function(l){"success"===l.state?d.resolve(l.msg):d.reject(l.msg)})),d}function p(d){var c=d,b=c.mode;"emit"!==b&&"return"!==b||("emit"===b&&l.emit(c.evName,c.msg),"return"===b&&l.emit(c.id,c))}function o(d){l.emit("error",d)}return X.onmessage=function(d){p(d.data)},X.onerror=o,m(Array.prototype.slice.call(arguments)),l.PCA=K,l.cluster=t,l.terminate=G,l}var m,I,h={PCA:(I=X(t.mark((function d(){var c,b,Z,X=arguments;return t.wrap((function(d){for(;;)switch(d.prev=d.next){case 0:return c=Array.prototype.slice.call(X),b=G(),d.next=4,b.PCA.apply(b,l(c)).finally((function(){b.terminate()}));case 4:return Z=d.sent,d.abrupt("return",Z);case 6:case"end":return d.stop()}}),d)}))),function(){return I.apply(this,arguments)}),cluster:(m=X(t.mark((function d(){var c,b,Z,X=arguments;return t.wrap((function(d){for(;;)switch(d.prev=d.next){case 0:return c=Array.prototype.slice.call(X),b=G(),d.next=4,b.cluster.apply(b,l(c)).finally((function(){b.terminate()}));case 4:return Z=d.sent,d.abrupt("return",Z);case 6:case"end":return d.stop()}}),d)}))),function(){return m.apply(this,arguments)})};for(var W in K=d(),h){var i=h[W];K[W]=i}}(),K}()}));return"undefined"!=typeof window&&void 0!==window.document?G:y}));
